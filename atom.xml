<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>orange的博客</title>
  
  <subtitle>向阳而生</subtitle>
  <link href="https://xuyuquan0713.github.io/atom.xml" rel="self"/>
  
  <link href="https://xuyuquan0713.github.io/"/>
  <updated>2022-03-10T09:13:30.100Z</updated>
  <id>https://xuyuquan0713.github.io/</id>
  
  <author>
    <name>徐玉全</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>youtub-dl</title>
    <link href="https://xuyuquan0713.github.io/2022/01/14/youtub-dl/"/>
    <id>https://xuyuquan0713.github.io/2022/01/14/youtub-dl/</id>
    <published>2022-01-14T14:18:11.000Z</published>
    <updated>2022-03-10T09:13:30.100Z</updated>
    
    <content type="html"><![CDATA[<h1 id="youtube-dl的使用命令"><a href="#youtube-dl的使用命令" class="headerlink" title="youtube-dl的使用命令"></a>youtube-dl的使用命令</h1><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">##要配合ffmpeg的使用</span><span class="token comment">#查看视频所有类型,只看不下载</span>youtube-dl -F <span class="token punctuation">[</span>url<span class="token punctuation">]</span>youtube-dl --list-formats <span class="token punctuation">[</span>url<span class="token punctuation">]</span><span class="token comment">#下载指定质量的视频和音频并自动合并</span>youtube-dl -f <span class="token punctuation">[</span>format code<span class="token punctuation">]</span> <span class="token punctuation">[</span>url<span class="token punctuation">]</span><span class="token comment">#下载字幕</span>youtube-dl --write-sub --skip-download <span class="token punctuation">[</span>url<span class="token punctuation">]</span> //下载单独的vtt字幕文件,而不会下载视频youtube-dl --write-sub --all-subs <span class="token punctuation">[</span>url<span class="token punctuation">]</span> //下载所有语言的字幕<span class="token punctuation">(</span>如果有的话<span class="token punctuation">)</span>youtube-dl --write-auto-sub <span class="token punctuation">[</span>url<span class="token punctuation">]</span> //下载自动生成的字幕<span class="token punctuation">(</span>YouTube only<span class="token punctuation">)</span><span class="token comment">#下载视频列表</span>youtube-dl -f <span class="token punctuation">[</span>format code<span class="token punctuation">]</span> <span class="token punctuation">[</span>palylist_url<span class="token punctuation">]</span> //这种方式可以下载制定清晰度的mp4视频youtube-dl <span class="token punctuation">[</span>playlist_url<span class="token punctuation">]</span> //下载视频列表,这种方式下载的视频可能是mkv格式或者webm格式youtube-dl -cit <span class="token punctuation">[</span>playlist_url<span class="token punctuation">]</span> //下载视频列表,这种方式下载的视频可能是mkv格式或者webm格式youtube-dl --yes-playlist <span class="token punctuation">[</span>url<span class="token punctuation">]</span> //当链接为视频列表,则下载该列表视频,跟上面的一样,可能是mkv或者webm格式<span class="token comment">#下载视频音频</span>youtube-dl -x video_URL<span class="token comment">#提取 MP3 格式的音频</span>youtube-dl -x --audio-format mp3 video_URL<span class="token comment">#下载整个 YouTube 播放列表</span>youtube-dl --extract-audio --audio-format mp3 -o <span class="token string">"%(title)s.%(ext)s"</span> playlist_URL<span class="token comment">## 挂代理进行youtube的视频音频，-o "%(title)s.%(ext)s" 指定了输出文件（选项 -o），并指示它使用视频的标题和扩展名（本例为 mp3）来命名音频文件。</span>.<span class="token punctuation">\</span>youtube-dl.exe --proxy <span class="token string">"127.0.0.1:1080"</span> -x --audio-format mp3 -o <span class="token string">"%(title)s.%(ext)s"</span> https://youtu.be/JxJ265Az6CI<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;youtube-dl的使用命令&quot;&gt;&lt;a href=&quot;#youtube-dl的使用命令&quot; class=&quot;headerlink&quot; title=&quot;youtube-dl的使用命令&quot;&gt;&lt;/a&gt;youtube-dl的使用命令&lt;/h1&gt;&lt;pre class=&quot;line-numb</summary>
      
    
    
    
    <category term="脚本" scheme="https://xuyuquan0713.github.io/categories/%E8%84%9A%E6%9C%AC/"/>
    
    
    <category term="脚本" scheme="https://xuyuquan0713.github.io/tags/%E8%84%9A%E6%9C%AC/"/>
    
  </entry>
  
  <entry>
    <title>今日校园脚本</title>
    <link href="https://xuyuquan0713.github.io/2021/11/23/%E4%BB%8A%E6%97%A5%E6%A0%A1%E5%9B%AD%E8%84%9A%E6%9C%AC/"/>
    <id>https://xuyuquan0713.github.io/2021/11/23/%E4%BB%8A%E6%97%A5%E6%A0%A1%E5%9B%AD%E8%84%9A%E6%9C%AC/</id>
    <published>2021-11-23T15:33:35.000Z</published>
    <updated>2022-03-10T09:13:30.100Z</updated>
    
    <content type="html"><![CDATA[<h1 id="今日校园"><a href="#今日校园" class="headerlink" title="今日校园"></a>今日校园</h1><p>本脚本使用是HFUT学校，其它学校可以参考。<br>功能：<br>实现今日校园自动签到，使用<code>crontab</code>自动化执行脚本，使用<code>server</code>酱自动推送到微信。</p><span id="more"></span><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> requests<span class="token keyword">import</span> json<span class="token keyword">import</span> time<span class="token keyword">import</span> datetime<span class="token keyword">import</span> pytz<span class="token keyword">import</span> base64<span class="token keyword">import</span> argparse<span class="token keyword">from</span> Crypto<span class="token punctuation">.</span>Cipher <span class="token keyword">import</span> AES<span class="token keyword">from</span> requests<span class="token punctuation">.</span>sessions <span class="token keyword">import</span> session<span class="token keyword">class</span> <span class="token class-name">hfuter</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> username<span class="token punctuation">,</span> password<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token boolean">None</span><span class="token punctuation">:</span>        <span class="token builtin">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>session <span class="token operator">=</span> requests<span class="token punctuation">.</span>session<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>session<span class="token punctuation">.</span>headers<span class="token punctuation">.</span>update<span class="token punctuation">(</span><span class="token punctuation">&#123;</span>            <span class="token string">"User-Agent"</span><span class="token punctuation">:</span> <span class="token string">"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) "</span>            <span class="token string">"Chrome/83.0.4103.61 Safari/537.36 Edg/83.0.478.37"</span><span class="token punctuation">,</span>            <span class="token string">"Accept"</span><span class="token punctuation">:</span> <span class="token string">"application/json, text/plain, */*"</span><span class="token punctuation">,</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>username <span class="token operator">=</span> username        self<span class="token punctuation">.</span>password <span class="token operator">=</span> password        ret <span class="token operator">=</span> self<span class="token punctuation">.</span>__login<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> ret<span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"&#123;username&#125;登录成功"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>username<span class="token operator">=</span>self<span class="token punctuation">.</span>username<span class="token punctuation">)</span><span class="token punctuation">)</span>            self<span class="token punctuation">.</span>logged_in <span class="token operator">=</span> <span class="token boolean">True</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"&#123;username&#125;登录失败！"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>username<span class="token operator">=</span>self<span class="token punctuation">.</span>username<span class="token punctuation">)</span><span class="token punctuation">)</span>            self<span class="token punctuation">.</span>logged_in <span class="token operator">=</span> <span class="token boolean">False</span>    <span class="token keyword">def</span> <span class="token function">__login</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">bool</span><span class="token punctuation">:</span>        <span class="token keyword">def</span> <span class="token function">encrypt_password</span><span class="token punctuation">(</span>text<span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">,</span> key<span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token triple-quoted-string string">"""encrypt password"""</span>            <span class="token keyword">def</span> <span class="token function">pad</span><span class="token punctuation">(</span>data_to_pad<span class="token punctuation">,</span> block_size<span class="token punctuation">,</span> style<span class="token operator">=</span><span class="token string">'pkcs7'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token triple-quoted-string string">"""Apply standard padding.                Args:                data_to_pad (byte string):                    The data that needs to be padded.                block_size (integer):                    The block boundary to use for padding. The output length is guaranteed                    to be a multiple of :data:`block_size`.                style (string):                    Padding algorithm. It can be *'pkcs7'* (default), *'iso7816'* or *'x923'*.                Return:                byte string : the original data with the appropriate padding added at the end.                """</span>                <span class="token keyword">def</span> <span class="token function">bchr</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">:</span>                    <span class="token keyword">return</span> <span class="token builtin">bytes</span><span class="token punctuation">(</span><span class="token punctuation">[</span>s<span class="token punctuation">]</span><span class="token punctuation">)</span>                padding_len <span class="token operator">=</span> block_size<span class="token operator">-</span><span class="token builtin">len</span><span class="token punctuation">(</span>data_to_pad<span class="token punctuation">)</span> <span class="token operator">%</span> block_size                <span class="token keyword">if</span> style <span class="token operator">==</span> <span class="token string">'pkcs7'</span><span class="token punctuation">:</span>                    padding <span class="token operator">=</span> bchr<span class="token punctuation">(</span>padding_len<span class="token punctuation">)</span><span class="token operator">*</span>padding_len                <span class="token keyword">elif</span> style <span class="token operator">==</span> <span class="token string">'x923'</span><span class="token punctuation">:</span>                    padding <span class="token operator">=</span> bchr<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span>padding_len<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> bchr<span class="token punctuation">(</span>padding_len<span class="token punctuation">)</span>                <span class="token keyword">elif</span> style <span class="token operator">==</span> <span class="token string">'iso7816'</span><span class="token punctuation">:</span>                    padding <span class="token operator">=</span> bchr<span class="token punctuation">(</span><span class="token number">128</span><span class="token punctuation">)</span> <span class="token operator">+</span> bchr<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span>padding_len<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>                <span class="token keyword">else</span><span class="token punctuation">:</span>                    <span class="token keyword">raise</span> ValueError<span class="token punctuation">(</span><span class="token string">"Unknown padding style"</span><span class="token punctuation">)</span>                <span class="token keyword">return</span> data_to_pad <span class="token operator">+</span> padding            key <span class="token operator">=</span> key<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span>            text <span class="token operator">=</span> text<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span>            text <span class="token operator">=</span> pad<span class="token punctuation">(</span>text<span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">,</span> style<span class="token operator">=</span><span class="token string">'pkcs7'</span><span class="token punctuation">)</span>            aes <span class="token operator">=</span> AES<span class="token punctuation">.</span>new<span class="token punctuation">(</span>key<span class="token punctuation">,</span> AES<span class="token punctuation">.</span>MODE_ECB<span class="token punctuation">)</span>            password <span class="token operator">=</span> aes<span class="token punctuation">.</span>encrypt<span class="token punctuation">(</span>text<span class="token punctuation">)</span>            password <span class="token operator">=</span> base64<span class="token punctuation">.</span>b64encode<span class="token punctuation">(</span>password<span class="token punctuation">)</span>            <span class="token keyword">return</span> password        ret <span class="token operator">=</span> self<span class="token punctuation">.</span>session<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"https://cas.hfut.edu.cn/cas/login"</span><span class="token punctuation">)</span>        <span class="token comment"># JSESSIONID</span>        ret <span class="token operator">=</span> self<span class="token punctuation">.</span>session<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'https://cas.hfut.edu.cn/cas/vercode'</span><span class="token punctuation">)</span>        <span class="token comment"># check if needs Vercode</span>        millis <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">round</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        ret <span class="token operator">=</span> self<span class="token punctuation">.</span>session<span class="token punctuation">.</span>get<span class="token punctuation">(</span>            <span class="token string">'https://cas.hfut.edu.cn/cas/checkInitVercode'</span><span class="token punctuation">,</span> params<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token string">'_'</span><span class="token punctuation">:</span> millis<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>        key <span class="token operator">=</span> ret<span class="token punctuation">.</span>cookies<span class="token punctuation">[</span><span class="token string">'LOGIN_FLAVORING'</span><span class="token punctuation">]</span>        <span class="token keyword">if</span> ret<span class="token punctuation">.</span>json<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token comment"># needs OCR! will be done later.</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'需验证码，目前该功能此脚本未支持'</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token boolean">False</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'无需验证码'</span><span class="token punctuation">)</span>        <span class="token comment"># 加密密码</span>        password <span class="token operator">=</span> encrypt_password<span class="token punctuation">(</span>self<span class="token punctuation">.</span>password<span class="token punctuation">,</span> key<span class="token punctuation">)</span>        <span class="token comment"># 先get</span>        ret <span class="token operator">=</span> self<span class="token punctuation">.</span>session<span class="token punctuation">.</span>get<span class="token punctuation">(</span>            <span class="token string">'https://cas.hfut.edu.cn/cas/policy/checkUserIdenty'</span><span class="token punctuation">,</span>            params<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token string">'_'</span><span class="token punctuation">:</span> millis<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'username'</span><span class="token punctuation">:</span> self<span class="token punctuation">.</span>username<span class="token punctuation">,</span> <span class="token string">'password'</span><span class="token punctuation">:</span> password<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>        ret <span class="token operator">=</span> ret<span class="token punctuation">.</span>json<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment"># 判断是否成功</span>        <span class="token keyword">if</span> ret<span class="token punctuation">[</span><span class="token string">'msg'</span><span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token string">'success'</span> <span class="token keyword">and</span> <span class="token keyword">not</span> ret<span class="token punctuation">[</span><span class="token string">'data'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'authFlag'</span><span class="token punctuation">]</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token boolean">False</span>        <span class="token keyword">if</span> ret<span class="token punctuation">[</span><span class="token string">'data'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'mailRequired'</span><span class="token punctuation">]</span> <span class="token keyword">or</span> ret<span class="token punctuation">[</span><span class="token string">'data'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'phoneRequired'</span><span class="token punctuation">]</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"你需要先进行手机或者邮箱的认证，请在PC上打开cas.hfut.edu.cn页面进行登录之后才可使用此脚本"</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token boolean">False</span>        <span class="token comment"># 然后post</span>        self<span class="token punctuation">.</span>session<span class="token punctuation">.</span>headers<span class="token punctuation">.</span>update<span class="token punctuation">(</span>            <span class="token punctuation">&#123;</span><span class="token string">"Content-Type"</span><span class="token punctuation">:</span> <span class="token string">"application/x-www-form-urlencoded"</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>        ret <span class="token operator">=</span> self<span class="token punctuation">.</span>session<span class="token punctuation">.</span>post<span class="token punctuation">(</span>            <span class="token string">'https://cas.hfut.edu.cn/cas/login'</span><span class="token punctuation">,</span>            data<span class="token operator">=</span><span class="token punctuation">&#123;</span>                <span class="token string">'username'</span><span class="token punctuation">:</span> self<span class="token punctuation">.</span>username<span class="token punctuation">,</span>                <span class="token string">'capcha'</span><span class="token punctuation">:</span> <span class="token string">""</span><span class="token punctuation">,</span>                <span class="token string">'execution'</span><span class="token punctuation">:</span> <span class="token string">"e1s1"</span><span class="token punctuation">,</span>                <span class="token string">'_eventId'</span><span class="token punctuation">:</span> <span class="token string">"submit"</span><span class="token punctuation">,</span>                <span class="token string">'password'</span><span class="token punctuation">:</span> password<span class="token punctuation">,</span>                <span class="token string">'geolocation'</span><span class="token punctuation">:</span> <span class="token string">""</span><span class="token punctuation">,</span>                <span class="token string">'submit'</span><span class="token punctuation">:</span> <span class="token string">"登录"</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>session<span class="token punctuation">.</span>headers<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token string">"Content-Type"</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> ret<span class="token punctuation">.</span>text<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">"cas协议登录成功跳转页面"</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token boolean">True</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token boolean">False</span>    <span class="token keyword">def</span> <span class="token function">basic_infomation</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token keyword">not</span> self<span class="token punctuation">.</span>logged_in<span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>        self<span class="token punctuation">.</span>session<span class="token punctuation">.</span>get<span class="token punctuation">(</span>            <span class="token string">"http://stu.hfut.edu.cn/xsfw/sys/swmjbxxapp/*default/index.do"</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>session<span class="token punctuation">.</span>headers<span class="token punctuation">.</span>update<span class="token punctuation">(</span><span class="token punctuation">&#123;</span>            <span class="token string">"Content-Type"</span><span class="token punctuation">:</span> <span class="token string">"application/x-www-form-urlencoded"</span><span class="token punctuation">,</span>            <span class="token string">"X-Requested-With"</span><span class="token punctuation">:</span> <span class="token string">"XMLHttpRequest"</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>session<span class="token punctuation">.</span>post<span class="token punctuation">(</span>            <span class="token string">"http://stu.hfut.edu.cn/xsfw/sys/emapfunauth/welcomeAutoIndex.do"</span>        <span class="token punctuation">)</span>        self<span class="token punctuation">.</span>session<span class="token punctuation">.</span>headers<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token string">"Content-Type"</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>session<span class="token punctuation">.</span>headers<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token string">"X-Requested-With"</span><span class="token punctuation">)</span>        ret <span class="token operator">=</span> self<span class="token punctuation">.</span>session<span class="token punctuation">.</span>get<span class="token punctuation">(</span>            <span class="token string">"http://stu.hfut.edu.cn/xsfw/sys/emapfunauth/casValidate.do"</span><span class="token punctuation">,</span>            params<span class="token operator">=</span><span class="token punctuation">&#123;</span>                <span class="token string">'service'</span><span class="token punctuation">:</span> <span class="token string">'/xsfw/sys/swmjbxxapp/*default/index.do'</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">)</span>        self<span class="token punctuation">.</span>session<span class="token punctuation">.</span>headers<span class="token punctuation">.</span>update<span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token string">"X-Requested-With"</span><span class="token punctuation">:</span> <span class="token string">"XMLHttpRequest"</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>session<span class="token punctuation">.</span>headers<span class="token punctuation">.</span>update<span class="token punctuation">(</span>            <span class="token punctuation">&#123;</span><span class="token string">"Referer"</span><span class="token punctuation">:</span> <span class="token string">"http://stu.hfut.edu.cn/xsfw/sys/swmjbxxapp/*default/index.do"</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>        ret <span class="token operator">=</span> self<span class="token punctuation">.</span>session<span class="token punctuation">.</span>get<span class="token punctuation">(</span>            <span class="token string">"http://stu.hfut.edu.cn/xsfw/sys/emappagelog/config/swmjbxxapp.do"</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>session<span class="token punctuation">.</span>headers<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token string">"X-Requested-With"</span><span class="token punctuation">)</span>        config_data <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">"APPID"</span><span class="token punctuation">:</span> <span class="token string">"4930169432823497"</span><span class="token punctuation">,</span> <span class="token string">"APPNAME"</span><span class="token punctuation">:</span> <span class="token string">"swmjbxxapp"</span><span class="token punctuation">&#125;</span>        self<span class="token punctuation">.</span>session<span class="token punctuation">.</span>headers<span class="token punctuation">.</span>update<span class="token punctuation">(</span>            <span class="token punctuation">&#123;</span><span class="token string">"Content-Type"</span><span class="token punctuation">:</span> <span class="token string">"application/x-www-form-urlencoded"</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>        ret <span class="token operator">=</span> self<span class="token punctuation">.</span>session<span class="token punctuation">.</span>post<span class="token punctuation">(</span>            <span class="token string">"http://stu.hfut.edu.cn/xsfw/sys/swpubapp/MobileCommon/getSelRoleConfig.do"</span><span class="token punctuation">,</span>            data<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token string">"data"</span><span class="token punctuation">:</span> json<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span>config_data<span class="token punctuation">)</span><span class="token punctuation">&#125;</span>        <span class="token punctuation">)</span><span class="token punctuation">.</span>json<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> ret<span class="token punctuation">[</span><span class="token string">"code"</span><span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token string">"0"</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>ret<span class="token punctuation">[</span><span class="token string">"msg"</span><span class="token punctuation">]</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>        ret <span class="token operator">=</span> self<span class="token punctuation">.</span>session<span class="token punctuation">.</span>post<span class="token punctuation">(</span>            <span class="token string">"http://stu.hfut.edu.cn/xsfw/sys/swpubapp/MobileCommon/getMenuInfo.do"</span><span class="token punctuation">,</span>            data<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token string">"data"</span><span class="token punctuation">:</span> json<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span>config_data<span class="token punctuation">)</span><span class="token punctuation">&#125;</span>        <span class="token punctuation">)</span><span class="token punctuation">.</span>json<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> ret<span class="token punctuation">[</span><span class="token string">"code"</span><span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token string">"0"</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>ret<span class="token punctuation">[</span><span class="token string">"msg"</span><span class="token punctuation">]</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>        self<span class="token punctuation">.</span>session<span class="token punctuation">.</span>headers<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token string">"Content-Type"</span><span class="token punctuation">)</span>        info <span class="token operator">=</span> self<span class="token punctuation">.</span>session<span class="token punctuation">.</span>get<span class="token punctuation">(</span>            <span class="token string">"http://stu.hfut.edu.cn/xsfw/sys/swmjbxxapp/StudentBasicInfo/initPageConfig.do"</span><span class="token punctuation">,</span> params<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token string">"data"</span><span class="token punctuation">:</span> <span class="token string">"&#123;&#125;"</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>json<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>session<span class="token punctuation">.</span>headers<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token string">"Referer"</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> info<span class="token punctuation">[</span><span class="token string">'data'</span><span class="token punctuation">]</span>    <span class="token keyword">def</span> <span class="token function">daily_checkin</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> address<span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">bool</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token keyword">not</span> self<span class="token punctuation">.</span>logged_in<span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token boolean">False</span>        today <span class="token operator">=</span> datetime<span class="token punctuation">.</span>datetime<span class="token punctuation">.</span>now<span class="token punctuation">(</span>            tz<span class="token operator">=</span>pytz<span class="token punctuation">.</span>timezone<span class="token punctuation">(</span><span class="token string">'Asia/Shanghai'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>timetuple<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">]</span>        self<span class="token punctuation">.</span>session<span class="token punctuation">.</span>get<span class="token punctuation">(</span>            <span class="token string">"http://stu.hfut.edu.cn/xsfw/sys/swmxsyqxxsjapp/*default/index.do"</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>session<span class="token punctuation">.</span>headers<span class="token punctuation">.</span>update<span class="token punctuation">(</span><span class="token punctuation">&#123;</span>            <span class="token string">"Content-Type"</span><span class="token punctuation">:</span> <span class="token string">"application/x-www-form-urlencoded"</span><span class="token punctuation">,</span>            <span class="token string">"X-Requested-With"</span><span class="token punctuation">:</span> <span class="token string">"XMLHttpRequest"</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>session<span class="token punctuation">.</span>post<span class="token punctuation">(</span>            <span class="token string">"http://stu.hfut.edu.cn/xsfw/sys/emapfunauth/welcomeAutoIndex.do"</span>        <span class="token punctuation">)</span>        self<span class="token punctuation">.</span>session<span class="token punctuation">.</span>headers<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token string">"Content-Type"</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>session<span class="token punctuation">.</span>headers<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token string">"X-Requested-With"</span><span class="token punctuation">)</span>        ret <span class="token operator">=</span> self<span class="token punctuation">.</span>session<span class="token punctuation">.</span>get<span class="token punctuation">(</span>            <span class="token string">"http://stu.hfut.edu.cn/xsfw/sys/emapfunauth/casValidate.do"</span><span class="token punctuation">,</span>            params<span class="token operator">=</span><span class="token punctuation">&#123;</span>                <span class="token string">'service'</span><span class="token punctuation">:</span> <span class="token string">'/xsfw/sys/swmjbxxapp/*default/index.do'</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">)</span>        self<span class="token punctuation">.</span>session<span class="token punctuation">.</span>headers<span class="token punctuation">.</span>update<span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token string">"X-Requested-With"</span><span class="token punctuation">:</span> <span class="token string">"XMLHttpRequest"</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>session<span class="token punctuation">.</span>headers<span class="token punctuation">.</span>update<span class="token punctuation">(</span>            <span class="token punctuation">&#123;</span><span class="token string">"Referer"</span><span class="token punctuation">:</span> <span class="token string">"http://stu.hfut.edu.cn/xsfw/sys/swmjbxxapp/*default/index.do"</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>        ret <span class="token operator">=</span> self<span class="token punctuation">.</span>session<span class="token punctuation">.</span>get<span class="token punctuation">(</span>            <span class="token string">"http://stu.hfut.edu.cn/xsfw/sys/emappagelog/config/swmxsyqxxsjapp.do"</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>session<span class="token punctuation">.</span>headers<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token string">"X-Requested-With"</span><span class="token punctuation">)</span>        config_data <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">"APPID"</span><span class="token punctuation">:</span> <span class="token string">"5811260348942403"</span><span class="token punctuation">,</span>                       <span class="token string">"APPNAME"</span><span class="token punctuation">:</span> <span class="token string">"swmxsyqxxsjapp"</span><span class="token punctuation">&#125;</span>        self<span class="token punctuation">.</span>session<span class="token punctuation">.</span>headers<span class="token punctuation">.</span>update<span class="token punctuation">(</span>            <span class="token punctuation">&#123;</span><span class="token string">"Content-Type"</span><span class="token punctuation">:</span> <span class="token string">"application/x-www-form-urlencoded"</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>        ret <span class="token operator">=</span> self<span class="token punctuation">.</span>session<span class="token punctuation">.</span>post<span class="token punctuation">(</span>            <span class="token string">"http://stu.hfut.edu.cn/xsfw/sys/swpubapp/MobileCommon/getSelRoleConfig.do"</span><span class="token punctuation">,</span>            data<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token string">"data"</span><span class="token punctuation">:</span> json<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span>config_data<span class="token punctuation">)</span><span class="token punctuation">&#125;</span>        <span class="token punctuation">)</span><span class="token punctuation">.</span>json<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> ret<span class="token punctuation">[</span><span class="token string">"code"</span><span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token string">"0"</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>ret<span class="token punctuation">[</span><span class="token string">"msg"</span><span class="token punctuation">]</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token boolean">False</span>        ret <span class="token operator">=</span> self<span class="token punctuation">.</span>session<span class="token punctuation">.</span>post<span class="token punctuation">(</span>            <span class="token string">"http://stu.hfut.edu.cn/xsfw/sys/swpubapp/MobileCommon/getMenuInfo.do"</span><span class="token punctuation">,</span>            data<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token string">"data"</span><span class="token punctuation">:</span> json<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span>config_data<span class="token punctuation">)</span><span class="token punctuation">&#125;</span>        <span class="token punctuation">)</span><span class="token punctuation">.</span>json<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> ret<span class="token punctuation">[</span><span class="token string">"code"</span><span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token string">"0"</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>ret<span class="token punctuation">[</span><span class="token string">"msg"</span><span class="token punctuation">]</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token boolean">False</span>        self<span class="token punctuation">.</span>session<span class="token punctuation">.</span>headers<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token string">"Content-Type"</span><span class="token punctuation">)</span>        info <span class="token operator">=</span> self<span class="token punctuation">.</span>session<span class="token punctuation">.</span>get<span class="token punctuation">(</span>            <span class="token string">"http://stu.hfut.edu.cn/xsfw/sys/swmxsyqxxsjapp/modules/mrbpa/getSetting.do"</span><span class="token punctuation">,</span>            data<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token string">"data"</span><span class="token punctuation">:</span> <span class="token string">"&#123;&#125;"</span><span class="token punctuation">&#125;</span>        <span class="token punctuation">)</span><span class="token punctuation">.</span>json<span class="token punctuation">(</span><span class="token punctuation">)</span>        start_time <span class="token operator">=</span> <span class="token string">"%04d-%02d-%02d "</span> <span class="token operator">%</span> today <span class="token operator">+</span> \            info<span class="token punctuation">[</span><span class="token string">'data'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'DZ_TBKSSJ'</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">" +0800"</span>        start_time <span class="token operator">=</span> datetime<span class="token punctuation">.</span>datetime<span class="token punctuation">.</span>strptime<span class="token punctuation">(</span>            start_time<span class="token punctuation">,</span> <span class="token string">"%Y-%m-%d %H:%M:%S %z"</span><span class="token punctuation">)</span>        end_time <span class="token operator">=</span> <span class="token string">"%04d-%02d-%02d "</span> <span class="token operator">%</span> today <span class="token operator">+</span> \            info<span class="token punctuation">[</span><span class="token string">'data'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'DZ_TBJSSJ'</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">" +0800"</span>        end_time <span class="token operator">=</span> datetime<span class="token punctuation">.</span>datetime<span class="token punctuation">.</span>strptime<span class="token punctuation">(</span>end_time<span class="token punctuation">,</span> <span class="token string">"%Y-%m-%d %H:%M:%S %z"</span><span class="token punctuation">)</span>        now_time <span class="token operator">=</span> datetime<span class="token punctuation">.</span>datetime<span class="token punctuation">.</span>now<span class="token punctuation">(</span>tz<span class="token operator">=</span>pytz<span class="token punctuation">.</span>timezone<span class="token punctuation">(</span><span class="token string">'Asia/Shanghai'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"打卡起始时间:"</span><span class="token punctuation">,</span> start_time<span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"打卡结束时间:"</span><span class="token punctuation">,</span> end_time<span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"　　现在时间:"</span><span class="token punctuation">,</span> now_time<span class="token punctuation">)</span>        <span class="token keyword">if</span> start_time <span class="token operator">&lt;</span> now_time <span class="token keyword">and</span> now_time <span class="token operator">&lt;</span> end_time<span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"在打卡时间内"</span><span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"不在打卡时间内"</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token boolean">False</span>        self<span class="token punctuation">.</span>session<span class="token punctuation">.</span>headers<span class="token punctuation">.</span>update<span class="token punctuation">(</span>            <span class="token punctuation">&#123;</span><span class="token string">"Content-Type"</span><span class="token punctuation">:</span> <span class="token string">"application/x-www-form-urlencoded"</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>        last_form <span class="token operator">=</span> self<span class="token punctuation">.</span>session<span class="token punctuation">.</span>post<span class="token punctuation">(</span>            <span class="token string">"http://stu.hfut.edu.cn/xsfw/sys/swmxsyqxxsjapp/modules/mrbpa/getStuXx.do"</span><span class="token punctuation">,</span>            data<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token string">"data"</span><span class="token punctuation">:</span> json<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token string">"TBSJ"</span><span class="token punctuation">:</span> <span class="token string">"%.2d-%.2d-%.2d"</span> <span class="token operator">%</span> today<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span>        <span class="token punctuation">)</span><span class="token punctuation">.</span>json<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> last_form<span class="token punctuation">[</span><span class="token string">'code'</span><span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token string">"0"</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token boolean">False</span>        new_form <span class="token operator">=</span> last_form<span class="token punctuation">[</span><span class="token string">'data'</span><span class="token punctuation">]</span>        new_form<span class="token punctuation">.</span>update<span class="token punctuation">(</span><span class="token punctuation">&#123;</span>            <span class="token string">"DZ_SFSB"</span><span class="token punctuation">:</span> <span class="token string">"1"</span><span class="token punctuation">,</span>            <span class="token string">"GCKSRQ"</span><span class="token punctuation">:</span> <span class="token string">""</span><span class="token punctuation">,</span>            <span class="token string">"GCJSRQ"</span><span class="token punctuation">:</span> <span class="token string">""</span><span class="token punctuation">,</span>            <span class="token string">"DFHTJHBSJ"</span><span class="token punctuation">:</span> <span class="token string">""</span><span class="token punctuation">,</span>            <span class="token string">"DZ_TBDZ"</span><span class="token punctuation">:</span> address<span class="token punctuation">,</span>            <span class="token string">"BY1"</span><span class="token punctuation">:</span> <span class="token string">"1"</span><span class="token punctuation">,</span>            <span class="token string">"TBSJ"</span><span class="token punctuation">:</span> <span class="token string">"%.2d-%.2d-%.2d"</span> <span class="token operator">%</span> today        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>        ret <span class="token operator">=</span> self<span class="token punctuation">.</span>session<span class="token punctuation">.</span>post<span class="token punctuation">(</span>            <span class="token string">"http://stu.hfut.edu.cn/xsfw/sys/swmxsyqxxsjapp/modules/mrbpa/saveStuXx.do"</span><span class="token punctuation">,</span>            data<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token string">"data"</span><span class="token punctuation">:</span> json<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span>new_form<span class="token punctuation">)</span><span class="token punctuation">&#125;</span>        <span class="token punctuation">)</span><span class="token punctuation">.</span>json<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>session<span class="token punctuation">.</span>headers<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token string">"Content-Type"</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>session<span class="token punctuation">.</span>headers<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token string">"Referer"</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> ret<span class="token punctuation">[</span><span class="token string">'code'</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">"0"</span><span class="token comment"># An example code demonstrating how to use the interfaces.</span><span class="token comment"># actually, it was already usable.</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    arg_parser <span class="token operator">=</span> argparse<span class="token punctuation">.</span>ArgumentParser<span class="token punctuation">(</span><span class="token punctuation">)</span>    arg_parser<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span><span class="token string">'username'</span><span class="token punctuation">,</span> <span class="token builtin">type</span><span class="token operator">=</span><span class="token builtin">str</span><span class="token punctuation">,</span> <span class="token builtin">help</span><span class="token operator">=</span><span class="token string">"学工号"</span><span class="token punctuation">)</span>    arg_parser<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span><span class="token string">'password'</span><span class="token punctuation">,</span> <span class="token builtin">type</span><span class="token operator">=</span><span class="token builtin">str</span><span class="token punctuation">,</span> <span class="token builtin">help</span><span class="token operator">=</span><span class="token string">"密码，默认为身份证后6位"</span><span class="token punctuation">)</span>    arg_parser<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span><span class="token string">'address'</span><span class="token punctuation">,</span> <span class="token builtin">type</span><span class="token operator">=</span><span class="token builtin">str</span><span class="token punctuation">,</span> <span class="token builtin">help</span><span class="token operator">=</span><span class="token string">"签到地址"</span><span class="token punctuation">)</span>    args <span class="token operator">=</span> arg_parser<span class="token punctuation">.</span>parse_args<span class="token punctuation">(</span><span class="token punctuation">)</span>    stu <span class="token operator">=</span> hfuter<span class="token punctuation">(</span>username<span class="token operator">=</span>args<span class="token punctuation">.</span>username<span class="token punctuation">,</span> password<span class="token operator">=</span>args<span class="token punctuation">.</span>password<span class="token punctuation">)</span>    <span class="token keyword">if</span> stu<span class="token punctuation">.</span>daily_checkin<span class="token punctuation">(</span>args<span class="token punctuation">.</span>address<span class="token punctuation">)</span><span class="token punctuation">:</span>        sckey <span class="token operator">=</span> <span class="token string">'key'</span><span class="token comment">#在发送消息页面可以找到</span>        <span class="token comment">#text为推送的title,desp为推送的描述</span>        url <span class="token operator">=</span> <span class="token string">'https://sc.ftqq.com/%s.send?text=推送主题&amp;desp=内容'</span><span class="token operator">%</span>sckey        requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"签到成功~"</span><span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"签到失败！"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用方法执行 <code>python3 学号 密码 地点</code>。<br>自动化部署：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#启动crontab</span>sudo service cron start<span class="token comment">#编辑crontab文件</span>crontab <span class="token operator">-</span>e<span class="token operator">*</span>  <span class="token operator">*</span>  <span class="token operator">*</span> <span class="token operator">*</span>  <span class="token operator">*</span>   command分 时 天 月 周   命令如：<span class="token number">15</span> <span class="token number">15</span> × × ×  python3 学号 密码 地点<span class="token comment">#更改编辑器</span>sudo select<span class="token operator">-</span>editor<span class="token comment">#查看定时任务</span>crontab <span class="token operator">-</span>l<span class="token comment">#重启任务</span>sudo service cron restart<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;今日校园&quot;&gt;&lt;a href=&quot;#今日校园&quot; class=&quot;headerlink&quot; title=&quot;今日校园&quot;&gt;&lt;/a&gt;今日校园&lt;/h1&gt;&lt;p&gt;本脚本使用是HFUT学校，其它学校可以参考。&lt;br&gt;功能：&lt;br&gt;实现今日校园自动签到，使用&lt;code&gt;crontab&lt;/code&gt;自动化执行脚本，使用&lt;code&gt;server&lt;/code&gt;酱自动推送到微信。&lt;/p&gt;</summary>
    
    
    
    <category term="其他" scheme="https://xuyuquan0713.github.io/categories/%E5%85%B6%E4%BB%96/"/>
    
    
    <category term="其他" scheme="https://xuyuquan0713.github.io/tags/%E5%85%B6%E4%BB%96/"/>
    
  </entry>
  
  <entry>
    <title>linux-and-vim</title>
    <link href="https://xuyuquan0713.github.io/2021/07/03/linux-and-vim/"/>
    <id>https://xuyuquan0713.github.io/2021/07/03/linux-and-vim/</id>
    <published>2021-07-03T09:31:02.000Z</published>
    <updated>2022-03-10T09:13:30.100Z</updated>
    
    <content type="html"><![CDATA[<h1 id="linux下的vim的使用"><a href="#linux下的vim的使用" class="headerlink" title="linux下的vim的使用"></a>linux下的vim的使用</h1><p><img src="https://gitee.com/xu-yuquan/picture-markdown/raw/master/tmux.png"></p><span id="more"></span><h2 id="1、zsh终端的安装和使用"><a href="#1、zsh终端的安装和使用" class="headerlink" title="1、zsh终端的安装和使用"></a>1、zsh终端的安装和使用</h2><p><strong>安装：</strong></p><p><code>sudo apt install zsh</code></p><p><strong>安装<a href="https://ohmyz.sh/">oh-my-zsh</a></strong></p><p><code>sh -c &quot;$(curl -fsSL https://raw.github.com/ohmyzsh/ohmyzsh/master/tools/install.sh)&quot;</code></p><p>或者</p><p><code>sh -c &quot;$(wget https://raw.github.com/ohmyzsh/ohmyzsh/master/tools/install.sh -O -)&quot;</code></p><p><strong>配置文件：</strong></p><p><code>vim ./zshrc</code>可以在ZSH_THEME=”ys”配置相应的主题，在官网上可以找到相应的主题。然后终端执行<code>source ~/.zshrc</code></p><p>oh-my-zsh 的自带插件都储存在~/.oh-my-zsh/plugins目录中，如果你希望安装一个插件，可以在 ~/.zshrc的 plugins=(xxx, xxx, …) 这一行里加入插件名称.</p><p>如果你需要安装第三方插件和主题，你可以在 “~/.zshrc” 的某一行（比如末尾）加入 source /path/to/plugin,根据自己的插件输入目录。</p><h2 id="2、vim插件vim-plug的安装和使用"><a href="#2、vim插件vim-plug的安装和使用" class="headerlink" title="2、vim插件vim-plug的安装和使用"></a>2、vim插件<a href="https://github.com/junegunn/vim-plug">vim-plug</a>的安装和使用</h2><p><strong>安装：</strong></p><p><code>mkdir -p  ~/.vim/autoload/</code></p><p><code>cp plug.vim  ~/.vim/autoload/plug.vim</code></p><p><strong>插件的添加和使用：</strong><br>编辑~/.vimrc文件中的内容，比如安装“lightline.vim” 插件</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">call plug<span class="token comment">#begin('~/.vim/plugged')</span>Plug <span class="token string">'itchyny/lightline.vim'</span>call plug<span class="token comment">#end()</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>运行命令重新加载：</strong></p><p><code>:source ~/.vimrc</code></p><p>插件的安装和卸载：</p><blockquote><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">打开 <span class="token function">vim</span> 使用命令 <span class="token builtin class-name">:</span>:PlugInstall你也可以使用以下命令，指定安装特定的插件：:PlugInstall gist-vim 打开 <span class="token function">vim</span> 使用命令卸载：:PlugClean<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote><p><strong>更新插件：</strong></p><p>使用以下命令，可以更新vim-plug插件自身：</p><p><code>:PlugUpgrade</code></p><p>使用以下命令，可以批量更新所有已安装的插件：</p><p><code>:PlugUpdate</code></p><p>使用以下命令，可以查看当前已安装插件的状态信息：</p><p><code>:PlugStatus</code></p><p><a href="https://zhuanlan.zhihu.com/p/84954261">Vim常用的插件推荐</a></p><p><strong>Vim操作的使用：</strong></p><p>1、Vim键盘</p><p><img src="https://gitee.com/xu-yuquan/picture-markdown/raw/master/vi-vim-cheat-sheet-sch.gif"></p><p>2、Vim命令图解</p><p><img src="https://gitee.com/xu-yuquan/picture-markdown/raw/master/vim-cheat-sheet-full.png"></p><p>3、Vim使用</p><p><img src="https://gitee.com/xu-yuquan/picture-markdown/raw/master/vim-cheat-sheet-cn.png"></p><p><img src="https://gitee.com/xu-yuquan/picture-markdown/raw/master/vim_cheat_sheet_for_programmers_screen.png"></p><h2 id="3、Tmux的安装和使用"><a href="#3、Tmux的安装和使用" class="headerlink" title="3、Tmux的安装和使用"></a>3、Tmux的安装和使用</h2><p>==<strong>介绍：</strong>==</p><p><img src="https://gitee.com/xu-yuquan/picture-markdown/raw/master/tmux.png"></p><p>tmux 是一款优秀的终端复用工具（terminal multiplexer），是常用的开发工具，使用它最直观的好处就是，通过一个终端登录远程主机并运行tmux后，在其中可以开启多个控制台而无需再“浪费”多余的终端来连接这台远程主机。<a href="http://louiszhai.github.io/2017/09/30/tmux/#%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5">使用手册</a></p><p>==<strong>关于会话，窗口，进程:</strong>==</p><p>命令行的典型使用方式是，打开一个终端窗口（terminal window，以下简称 “窗口”），在里面输入命令。 用户与计算机的这种临时的交互，称为一次 “会话”（session） 。</p><p>会话的一个重要特点是，窗口与其中启动的进程是连在一起的。打开窗口，会话开始；关闭窗口，会话结束，会话内部的进程也会随之终止，不管有没有运行完。</p><p>一个典型的例子就是，SSH 登录远程计算机，打开一个远程窗口执行命令。这时，网络突然断线，再次登录的时候，是找不回上一次执行的命令的。因为上一次 SSH 会话已经终止了，里面的进程也随之消失了。</p><p>为了解决这个问题，会话与窗口可以 “解绑”：窗口关闭时，会话并不终止，而是继续运行，等到以后需要的时候，再让会话 “绑定” 其他窗口。</p><p>tmux 就是会话与窗口的 “解绑” 工具，将它们彻底分离。</p><p>（1）它允许在单个窗口中，同时访问多个会话。这对于同时运行多个命令行程序很有用。</p><p>（2）它可以让新窗口 “接入” 已经存在的会话。</p><p>（3）它允许每个会话有多个连接窗口，因此可以多人实时共享会话。</p><p>（4）它还支持窗口任意的垂直和水平拆分。</p><p>类似的终端复用器还有 GNU Screen。tmux 与它功能相似，但是更易用，也更强大。</p><p><img src="https://gitee.com/xu-yuquan/picture-markdown/raw/master/tmux-1.png"></p><p>==<strong>tmux概念</strong>==</p><p>使用 Tmux 的时候不用去背指令，所有的指令都可以在 <code>.tmux.conf</code> 配置文件中绑定自己顺手的快捷键，也可以配置开启鼠标。</p><p>在Tmux逻辑中，需要分清楚Server &gt; Session &gt; Window &gt; Pane这个大小和层级顺序是极其重要的，直接关系到工作效率：</p><ul><li>Server：是整个tmux的后台服务。有时候更改配置不生效，就要使用tmux kill-server来重启tmux。</li><li>Session：是tmux的所有会话。我之前就错把这个session当成窗口用，造成了很多不便里。一般只要保存一个session就足够了。</li><li>Window：相当于一个工作区，包含很多分屏，可以针对每种任务分一个Window。如下载一个Window，编程一个window。</li><li>Pane：是在Window里面的小分屏。最常用也最好用</li></ul><p>了解了这个逻辑后，整个Tmux的使用和配置也就清晰了。</p><p><img src="https://gitee.com/xu-yuquan/picture-markdown/raw/master/tmux1.png"></p><p><a href="https://pityonline.gitbooks.io/tmux-productive-mouse-free-development_zh/content/index.html">详细的使用书籍</a></p><p><a href="https://www.freeaihub.com/article/tmux.html">使用操作</a></p><h2 id="4、linux快捷键使用"><a href="#4、linux快捷键使用" class="headerlink" title="4、linux快捷键使用"></a>4、linux快捷键使用</h2><p><strong>快捷键：</strong></p><p><img src="https://gitee.com/xu-yuquan/picture-markdown/raw/master/linux_common_commands2.jpg"></p><p><img src="https://gitee.com/xu-yuquan/picture-markdown/raw/master/Linux-Command-Line-Guide.png"></p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;linux下的vim的使用&quot;&gt;&lt;a href=&quot;#linux下的vim的使用&quot; class=&quot;headerlink&quot; title=&quot;linux下的vim的使用&quot;&gt;&lt;/a&gt;linux下的vim的使用&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;https://gitee.com/xu-yuquan/picture-markdown/raw/master/tmux.png&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="vim" scheme="https://xuyuquan0713.github.io/categories/vim/"/>
    
    
    <category term="vim" scheme="https://xuyuquan0713.github.io/tags/vim/"/>
    
  </entry>
  
  <entry>
    <title>Jupyter Notebook 的快捷键</title>
    <link href="https://xuyuquan0713.github.io/2021/05/10/Jupyter-Notebook-%E7%9A%84%E5%BF%AB%E6%8D%B7%E9%94%AE/"/>
    <id>https://xuyuquan0713.github.io/2021/05/10/Jupyter-Notebook-%E7%9A%84%E5%BF%AB%E6%8D%B7%E9%94%AE/</id>
    <published>2021-05-10T07:29:35.000Z</published>
    <updated>2022-03-10T09:13:30.100Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Jupyter-Notebook-的快捷键"><a href="#Jupyter-Notebook-的快捷键" class="headerlink" title="Jupyter Notebook 的快捷键"></a>Jupyter Notebook 的快捷键</h1><p><strong>Jupyter Notebook 有两种键盘输入模式。</strong></p><span id="more"></span><p><strong>使用前需要进行安装：</strong></p><p><code>pip install jupyter</code>  <strong>(前提是你已经安装好Python,并将python添加到环境解释器中)</strong></p><p><strong>安装完成之后，因为python已经添加至环境变量中，所以直接使用 ==jupyter notebook==即可启动，如果你想要打开ipynb结尾的文件，直接在cmd控制台将用cd切换到ipynb结尾的文件所在的目录即可！</strong></p><p><strong>==Jupyter Notebook== 有两种键盘输入模式。编辑模式，允许你往单元中键入代码或文本；这时的单元框线是绿色的。命令模式，键盘输入运行程序命令；这时的单元框线是灰色。</strong></p><h3 id="命令模式-按键-Esc-开启"><a href="#命令模式-按键-Esc-开启" class="headerlink" title="命令模式 (按键 Esc 开启)"></a><strong>命令模式 (按键 Esc 开启)</strong></h3><ul><li>  <strong>Enter</strong> : 转入编辑模式</li><li>  <strong>Shift-Enter</strong> : 运行本单元，选中下个单元</li><li>  <strong>Ctrl-Enter</strong> : 运行本单元</li><li>  <strong>Alt-Enter</strong> : 运行本单元，在其下插入新单元</li><li>  <strong>Y</strong> : 单元转入代码状态</li><li>  <strong>M</strong> :单元转入markdown状态</li><li>  <strong>R</strong> : 单元转入raw状态</li><li>  <strong>1</strong> : 设定 1 级标题</li><li>  <strong>2</strong> : 设定 2 级标题</li><li>  <strong>3</strong> : 设定 3 级标题</li><li>  <strong>4</strong> : 设定 4 级标题</li><li>  <strong>5</strong> : 设定 5 级标题</li><li>  <strong>6</strong> : 设定 6 级标题</li><li>  <strong>Up</strong> : 选中上方单元</li><li>  <strong>K</strong> : 选中上方单元</li><li>  <strong>Down</strong> : 选中下方单元</li><li>  <strong>J</strong> : 选中下方单元</li><li>  <strong>Shift-K</strong> : 扩大选中上方单元</li><li>  <strong>Shift-J</strong> : 扩大选中下方单元</li><li>  <strong>A</strong> : 在上方插入新单元</li><li>  <strong>B</strong> : 在下方插入新单元</li><li>  <strong>X</strong> : 剪切选中的单元</li><li>  <strong>C</strong> : 复制选中的单元</li><li>  <strong>Shift-V</strong> : 粘贴到上方单元</li><li>  <strong>V</strong> : 粘贴到下方单元</li><li>  <strong>Z</strong> : 恢复删除的最后一个单元</li><li>  <strong>D,D</strong> : 删除选中的单元</li><li>  <strong>Shift-M</strong> : 合并选中的单元</li><li>  <strong>Ctrl-S</strong> : 文件存盘</li><li>  <strong>S</strong> : 文件存盘</li><li>  <strong>L</strong> : 转换行号</li><li>  <strong>O</strong> : 转换输出</li><li>  <strong>Shift-O</strong> : 转换输出滚动</li><li>  <strong>Esc</strong> : 关闭页面</li><li>  <strong>Q</strong> : 关闭页面</li><li>  <strong>H</strong> : 显示快捷键帮助</li><li>  <strong>I,I</strong> : 中断Notebook内核</li><li>  <strong>0,0</strong> : 重启Notebook内核</li><li>  <strong>Shift</strong> : 忽略</li><li>  <strong>Shift-Space</strong> : 向上滚动</li><li>  <strong>Space</strong> : 向下滚动</li></ul><h3 id="编辑模式-Enter-键启动"><a href="#编辑模式-Enter-键启动" class="headerlink" title="编辑模式 ( Enter 键启动)"></a><strong>编辑模式 ( Enter 键启动)</strong></h3><ul><li>  <strong>Tab</strong> : 代码补全或缩进</li><li>  <strong>Shift-Tab</strong> : 提示</li><li>  <strong>Ctrl-]</strong> : 缩进</li><li>  <strong>Ctrl-[</strong> : 解除缩进</li><li>  <strong>Ctrl-A</strong> : 全选</li><li>  <strong>Ctrl-Z</strong> : 复原</li><li>  <strong>Ctrl-Shift-Z</strong> : 再做</li><li>  <strong>Ctrl-Y</strong> : 再做</li><li>  <strong>Ctrl-Home</strong> : 跳到单元开头</li><li>  <strong>Ctrl-Up</strong> : 跳到单元开头</li><li>  <strong>Ctrl-End</strong> : 跳到单元末尾</li><li>  <strong>Ctrl-Down</strong> : 跳到单元末尾</li><li>  <strong>Ctrl-Left</strong> : 跳到左边一个字首</li><li>  <strong>Ctrl-Right</strong> : 跳到右边一个字首</li><li>  <strong>Ctrl-Backspace</strong> : 删除前面一个字</li><li>  <strong>Ctrl-Delete</strong> : 删除后面一个字</li><li>  <strong>Esc</strong> : 进入命令模式</li><li>  <strong>Ctrl-M</strong> : 进入命令模式</li><li>  <strong>Shift-Enter</strong> : 运行本单元，选中下一单元</li><li>  <strong>Ctrl-Enter</strong> : 运行本单元</li><li>  <strong>Alt-Enter</strong> : 运行本单元，在下面插入一单元</li><li>  <strong>Ctrl-Shift–</strong> : 分割单元</li><li>  <strong>Ctrl-Shift-Subtract</strong> : 分割单元</li><li>  <strong>Ctrl-S</strong> : 文件存盘</li><li>  <strong>Shift</strong> : 忽略</li><li>  <strong>Up</strong> : 光标上移或转入上一单元</li><li>  <strong>Down</strong> :光标下移或转入下一单元</li></ul>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;Jupyter-Notebook-的快捷键&quot;&gt;&lt;a href=&quot;#Jupyter-Notebook-的快捷键&quot; class=&quot;headerlink&quot; title=&quot;Jupyter Notebook 的快捷键&quot;&gt;&lt;/a&gt;Jupyter Notebook 的快捷键&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;Jupyter Notebook 有两种键盘输入模式。&lt;/strong&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="快捷键" scheme="https://xuyuquan0713.github.io/categories/%E5%BF%AB%E6%8D%B7%E9%94%AE/"/>
    
    
    <category term="Python" scheme="https://xuyuquan0713.github.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>钩子函数</title>
    <link href="https://xuyuquan0713.github.io/2021/04/24/%E9%92%A9%E5%AD%90%E5%87%BD%E6%95%B0/"/>
    <id>https://xuyuquan0713.github.io/2021/04/24/%E9%92%A9%E5%AD%90%E5%87%BD%E6%95%B0/</id>
    <published>2021-04-24T08:36:42.000Z</published>
    <updated>2022-03-10T09:13:30.099Z</updated>
    
    <content type="html"><![CDATA[<h1 id="钩子函数"><a href="#钩子函数" class="headerlink" title="钩子函数"></a>钩子函数</h1><p><strong><em>钩子函数也叫回调函数，是通过函数指针来实现的，那我们来看看什么是函数指针</em>。</strong></p><span id="more"></span><p>首先看看以下例子：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token operator">*</span>p<span class="token punctuation">;</span><span class="token keyword">int</span> a，b；<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>我们可以让指针p先后指向a, b，这样，p就先后代表了不同变量的地址</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">p <span class="token operator">=</span> <span class="token operator">&amp;</span>a<span class="token punctuation">;</span>p <span class="token operator">=</span> <span class="token operator">&amp;</span>b<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>同样地，函数的指针可以指向不同的函数，从而完成不同的功能。话说， 函数指针是怎么定义呢？ 函数指针和普通的指针没什么区别，只是函数指针是指向函数的指针。函数指针的定义方式起始和函数声明方式类似， 说白了就是函数声明，唯一不同的是定义的函数指针是可以指向任何具有相同传入参数和相同返回类型的函数，说这么多还不如举个例子来的实际点。</p><p><code>int (*g_pFun) (int x, int y);</code> 这里定义了一个返回值为int类型，有两个int类型传入参数的函数，假如我在写代码的时候，写了一个这样的函数：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">Max</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>Max函数是返回int类型，传入两个int类型参数的函数，这个函数类型是不是和我们定义的g_pFun的函数类型一致， 那么g_pFun可以指向Max，g_pFun = Max;  这样我们就可以使用g_pFun 来调用Max函数了， 比如，g_pFun(10, 12)和Max（10， 12）是一样的效果。说到这里，大家已经明白函数指针的用法了吧？</p><p>接下来我们看一个函数指针的实例代码：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"stdio.h"</span></span> <span class="token keyword">void</span> <span class="token function">fun1</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"i am fun1\r\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token keyword">void</span> <span class="token function">fun2</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"i am fun2\r\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token keyword">const</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">void</span> <span class="token punctuation">(</span><span class="token operator">*</span> fun<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//定义一个函数指针</span>     <span class="token comment">// 让fun指向fun1</span>    fun <span class="token operator">=</span> fun1<span class="token punctuation">;</span>    <span class="token comment">// 执行fun</span>    <span class="token function">fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">// 让fun指向fun2</span>    fun <span class="token operator">=</span> fun2<span class="token punctuation">;</span>    <span class="token comment">// 执行fun</span>    <span class="token function">fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这段代码中，首先写了两个无传入参数，无返回值的函数fun1 和 fun2， 然后定义了一个无返回值无传入参数的函数指针；main函数通过将fun指向fun1和fun2 然后再执行fun，达到调用fun1和fun2的作用。</p><p>运行结果：</p><p><img src="https://gitee.com/xu-yuquan/picture-markdown/raw/master/20210424.png"></p><p>其实说到这，我们已经会用钩子函数了，只是还没引入专业术语而已，在这里，fun 1和fun 2就是钩子函数，把函数指针fun指向fun 1和fun 2的过程称为“挂钩子”， 这个很形象吧。其实在这有人会问，为什么我不直接调用fun 1和fun 2函数，偏偏要通过定义一个函数指针来实现，这不是变得更麻烦，说到这，我只想说有些实物是适合在不同的场合，不是一定得这样用的， 我先说说一个场景。这是因为，我们在写main函数的时候，可能还不知道它会完成什么功能，这时候留下函数指针作为接口，可以挂上不同的函数完成不同的功能，究竟执行什么功能由钩子函数的编写者完成。</p><p>那我们平时怎么用的呢？</p><p>在我们的代码中，常常把挂钩子的过程叫做注册，会提供一个注册函数，让使用者把自己编写的钩子函数挂在已经声明的函数指针上，这个注册函数的参数就是我们的函数指针了，比如，我们可以给刚才的函数指针提供一个注册函数：</p><pre class="line-numbers language-none"><code class="language-none">int RegFun(int(*pFun)(int x, int y))    \*****注册函数的参数是函数指针***\&#123;    g_pFun &#x3D; pFun;    return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>那么上述代码改为以下代码：</p><pre class="line-numbers language-none"><code class="language-none">#include &quot;stdio.h&quot; void (* fun)(void); &#x2F;&#x2F;定义一个函数指针 void fun1(void)&#123;    printf(&quot;i am fun1\r\n&quot;);&#125; void fun2(void)&#123;    printf(&quot;i am fun2\r\n&quot;);&#125; int RegFun(void (*pFun)(void))&#x2F;&#x2F;形参为函数相应类型的函数指针&#123;    fun &#x3D; pFun;  &#x2F;&#x2F;将pFun挂钩子    return 0;&#125; int main(int argc, char const *argv[])&#123;     &#x2F;&#x2F; 挂fun1钩子函数    RegFun(fun1);     &#x2F;&#x2F; 执行fun    fun();     &#x2F;&#x2F; 挂fun2钩子函数    RegFun(fun2);    &#x2F;&#x2F; 执行fun    fun();     return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意：为了便于使用，函数指针往往被声明为全局变量，这也是刚才把函数指针的名字命名为g_pFun的原因。</p><p>下面我们来进行一下实战演习，比如，平台部分要执行某一个操作，但是具体的操作还不确定，我们完成这样的代码：</p><pre class="line-numbers language-none"><code class="language-none">#include &quot;stdio.h&quot; int (* g_pFun) (int x, int y);  &#x2F;*函数指针*&#x2F; int Plat(void)&#123;    int r;    int a &#x3D; 10;    int b &#x3D; 15;     r &#x3D; g_pFun(a, b);     printf(&quot;%d\n&quot;, r);     return 0;&#125; &#x2F;&#x2F;另外，平台部分再提供一个注册函数：int RegFun(int (*pFun)(int x, int y))&#123;    g_pFun &#x3D; pFun;     return 0;&#125; &#x2F;&#x2F;应用模块完成具体的函数的功能：int Max(int x, int y)&#123;    if(x &gt; y)    &#123;        return x;    &#125;    else    &#123;        return y;    &#125;&#125; int Min(int x, int y)&#123;    if (x &lt; y)        return x;    else        return y;&#125; int main(int argc, char const *argv[])&#123;    &#x2F;* code *&#x2F;     RegFun(Min);    Plat();     RegFun(Max);    Plat();     return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在嵌入式系统中，底层不知道应用层需要完成什么功能， 往往会提供像这样子的函数回调方式供应用层使用。</p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;钩子函数&quot;&gt;&lt;a href=&quot;#钩子函数&quot; class=&quot;headerlink&quot; title=&quot;钩子函数&quot;&gt;&lt;/a&gt;钩子函数&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;&lt;em&gt;钩子函数也叫回调函数，是通过函数指针来实现的，那我们来看看什么是函数指针&lt;/em&gt;。&lt;/strong&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="函数用法" scheme="https://xuyuquan0713.github.io/categories/%E5%87%BD%E6%95%B0%E7%94%A8%E6%B3%95/"/>
    
    
    <category term="函数" scheme="https://xuyuquan0713.github.io/tags/%E5%87%BD%E6%95%B0/"/>
    
  </entry>
  
  <entry>
    <title>树莓派内网穿透</title>
    <link href="https://xuyuquan0713.github.io/2021/04/10/%E6%A0%91%E8%8E%93%E6%B4%BE%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/"/>
    <id>https://xuyuquan0713.github.io/2021/04/10/%E6%A0%91%E8%8E%93%E6%B4%BE%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/</id>
    <published>2021-04-10T14:16:49.000Z</published>
    <updated>2022-03-10T09:13:30.099Z</updated>
    
    <content type="html"><![CDATA[<h2 id="树莓派内网穿透"><a href="#树莓派内网穿透" class="headerlink" title="树莓派内网穿透"></a>树莓派内网穿透</h2><span id="more"></span><hr><h2 id="这是自己最近遇到的一个实际问题。因为在做机器学习的内容，需要训练模型，恰好前几天实验室的老师答应借我服务器一用。可是服务器我又不能搬回寝室。因为我们学校比较特殊，宿舍区域接入了公网IP，而教学区域却没有。想着有公网ip的话，会方便许多。突然想到我不是还有树莓派么，为什么不让树莓派接入公网ip后再内网穿透呢！这是个好主意！"><a href="#这是自己最近遇到的一个实际问题。因为在做机器学习的内容，需要训练模型，恰好前几天实验室的老师答应借我服务器一用。可是服务器我又不能搬回寝室。因为我们学校比较特殊，宿舍区域接入了公网IP，而教学区域却没有。想着有公网ip的话，会方便许多。突然想到我不是还有树莓派么，为什么不让树莓派接入公网ip后再内网穿透呢！这是个好主意！" class="headerlink" title="这是自己最近遇到的一个实际问题。因为在做机器学习的内容，需要训练模型，恰好前几天实验室的老师答应借我服务器一用。可是服务器我又不能搬回寝室。因为我们学校比较特殊，宿舍区域接入了公网IP，而教学区域却没有。想着有公网ip的话，会方便许多。突然想到我不是还有树莓派么，为什么不让树莓派接入公网ip后再内网穿透呢！这是个好主意！"></a>这是自己最近遇到的一个实际问题。因为在做机器学习的内容，需要训练模型，恰好前几天实验室的老师答应借我服务器一用。可是服务器我又不能搬回寝室。因为我们学校比较特殊，宿舍区域接入了公网IP，而教学区域却没有。想着有公网ip的话，会方便许多。突然想到我不是还有树莓派么，为什么不让树莓派接入公网ip后再内网穿透呢！这是个好主意！</h2><p><img src="https://zgao.top//wp-content/uploads/2019/04/TIM%E5%9B%BE%E7%89%8720190420132638-300x155.jpg"></p><p>虽然网上也有关于介绍树莓派使用frp内网穿透的文章。不过这里的场景有所不同。网上的的案例大都是树莓派处于内网中，作为frp客户端，利用公网上的一台vps将树莓派的服务映射到公网上实现穿透。</p><h4 id="什么是内网穿透？"><a href="#什么是内网穿透？" class="headerlink" title="什么是内网穿透？"></a>什么是内网穿透？</h4><p>内网穿透，即NAT穿透，网络连接时术语，计算机是局域网内时，外网与内网的计算机节点需要连接通信，有时就会出现不支持内网穿透。</p><h4 id="为什么需要内网穿透功能？"><a href="#为什么需要内网穿透功能？" class="headerlink" title="为什么需要内网穿透功能？"></a>为什么需要内网穿透功能？</h4><p>因为<strong>从公网中访问自己的私有设备向来是一件困难的事情。</strong><br>自己的服务器、NAS等等设备，它们可能处于路由器后，或者运营商因为IP地址短缺不给你分配公网IP地址。如果我们想直接访问到这些设备（远程桌面，远程文件，SSH等等），一般来说要通过一些转发或者P2P组网软件的帮助。</p><p>比如我有一台计算机位于一个很复杂的局域网中，我想要实现远程桌面和文件访问，目前来看其所处的网络环境很难通过简单的端口映射将其暴露在公网之中，有这么几种方法：</p><ol><li> 远程桌面使用TeamViewer。可用，但需要访问端也拥有TeamViewer软件，不是很方便，希望能使用Windows自带的远程桌面。且TeamViewer不易实现远程文件访问。</li><li> 使用蒲公英VPN软件进行组网，可用，但免费版本网络速度极慢，体验不佳，几乎无法正常使用。</li><li> 使用花生壳软件进行DDNS解析，可用，但同第二点所述，免费版本有带宽限制，无法实际使用。</li><li> <strong><strong>搭建frp服务器进行内网穿透，可用且推荐，可以达到不错的速度，且理论上可以开放任何想要的端口，可以实现的功能远不止远程桌面或者文件共享。</strong></strong></li></ol><hr><h3 id="frp是什么？"><a href="#frp是什么？" class="headerlink" title="frp是什么？"></a>frp是什么？</h3><p>简单地说，<a href="https://github.com/fatedier/frp/blob/master/README_zh.md" title="frp">frp</a>就是一个反向代理软件，它体积轻量但功能很强大，可以<strong>使处于内网或防火墙后的设备对外界提供服务</strong>，它支持HTTP、TCP、UDP等众多协议。</p><p>因为我寝室的网络已经接入联通公网ip了，所以我是将树莓派作为frp服务器，向校园内网里的其他机器提供内网穿透。虽然我也有很多云服务器，但我最终还是选择了树莓派。</p><p>最大的原因还是考虑到延时问题。联通提供公网ip和学校的网络同处于一个局域网网内，这样树莓派和需要内网穿透的机器间的延迟就可以忽略不计，那么也就只有远程连接一方和树莓派所处网络间的延迟了。</p><p>因为frp是github上的一个开源项目，这里查看官方文档，非常详细。</p><h3 id="frp中文文档链接"><a href="#frp中文文档链接" class="headerlink" title="frp中文文档链接"></a><a href="https://github.com/fatedier/frp/blob/master/README_zh.md">frp中文文档链接</a></h3><h3 id="frp服务端搭建"><a href="#frp服务端搭建" class="headerlink" title="frp服务端搭建"></a>frp服务端搭建</h3><p>因为我使用树莓派作为服务端，所以先下载树莓派对应的版本，截止目前frp最新版本是<a href="https://github.com/fatedier/frp/releases/tag/v0.26.0">v0.26.0</a></p><p>如果用的vps，ssh连接到VPS之后运行如下命令查看处理器架构，根据架构下载不同版本的frp<br><code>arch</code><br>查看结果，如果是“X86_64“即可选择”amd64”，</p><p><a href="https://github.com/fatedier/frp/releases/">https://github.com/fatedier/frp/releases/</a></p><p><img src="https://zgao.top//wp-content/uploads/2019/04/TIM%E6%88%AA%E5%9B%BE20190420141048-300x103.png"></p><p>现在ssh远程连接上我们的树莓派，我是直接su root后以root身份执行的命令，如果你没有，请每一条命令前面带上   sudo 。</p><p>wget <a href="https://github.com/fatedier/frp/releases/download/v0.26.0/frp/_0.26.0/_linux/_arm.tar.gz">https://github.com/fatedier/frp/releases/download/v0.26.0/frp\_0.26.0\_linux\_arm.tar.gz</a></p><p>tar xvf frp_0.26.0_linux_arm.tar.gz</p><p>cd frp_0.26.0_linux_arm</p><p><img src="https://zgao.top//wp-content/uploads/2019/04/TIM%E6%88%AA%E5%9B%BE20190420141945-300x41.png"></p><p>这里我们只需要关注如下几个文件</p><ul><li>  frps</li><li>  frps_full.ini</li><li>  frps.ini</li></ul><p>该目录下的文件（s结尾代表server）分别是服务端程序和服务端配置文件，（c结尾代表client）分别是客户端程序和客户端配置文件。</p><p>vim   frps.ini       #编辑服务端配置文件，建议自行修改</p><blockquote><p>[common]</p><p>bind_port = 7000</p><p>dashboard_port = 7500</p><p>token = 12345678</p><p>dashboard_user = admin</p><p>dashboard_pwd = admin</p></blockquote><hr><ul><li>  “bind_port”表示用于客户端和服务端连接的端口，这个端口号我们之后在配置客户端的时候要用到。</li><li>  “dashboard_port”是服务端仪表板的端口，若使用7500端口，在配置完成服务启动后可以通过浏览器访问 x.x.x.x:7500 （其中x.x.x.x为VPS的IP）查看frp服务运行信息。</li><li>  “token”是用于客户端和服务端连接的口令，请自行设置并记录，稍后会用到。</li><li>  “dashboard_user”和“dashboard_pwd”表示打开仪表板页面登录的用户名和密码，自行设置即可。</li></ul><hr><p>这样就运行时就执行</p><p>======./frps -c frps.ini==</p><p><img src="https://zgao.top//wp-content/uploads/2019/04/TIM%E5%9B%BE%E7%89%8720190420144358-300x49.png"></p><p>如果看到屏幕输出这样一段内容，即表示运行正常，如果出现错误提示，请检查上面的步骤。</p><p>但是如果想偷懒的话，端口均可使用默认值，token、user和password项请自行设置。直接在frps_full.ini这个它给好的配置文件中修改后运行即可</p><p>./frps -c frps_full.ini</p><p>此时访问  你的ip:7500 并使用自己设置的用户名密码登录，即可看到仪表板界面。</p><p><img src="https://zgao.top//wp-content/uploads/2019/04/TIM%E6%88%AA%E5%9B%BE20190420144648-300x128.png"></p><h4 id="让frps在后台运行"><a href="#让frps在后台运行" class="headerlink" title="让frps在后台运行"></a>让frps在后台运行</h4><p>至此，我们的服务端仅运行在前台，如果Ctrl+C停止或者关闭SSH窗口后，frps均会停止运行，因而我们使用 screen命令将其运行在后台。因为我用的树莓派所以</p><p>apt install screen</p><p>screnn -S frps     #新建一个screen名为frps</p><p>此时我们就进入了screen里面了。再次执行./frps -c frps.ini</p><p>现在直接关闭ssh窗口，frps依旧在运行。frp服务端便搭建完成了。</p><h3 id="frp客户端配置"><a href="#frp客户端配置" class="headerlink" title="frp客户端配置"></a>frp客户端配置</h3><p>frp的客户端就是我们想要真正进行访问的那台设备，大多数情况下应该会是一台Windows主机，因而本文使用Windows主机做例子；Linux配置方法类似。</p><p>同样地，根据客户端设备的情况选择相应的frp程序进行<a href="https://github.com/fatedier/frp/releases" title="下载">下载</a></p><p><img src="https://zgao.top//wp-content/uploads/2019/04/TIM%E6%88%AA%E5%9B%BE20190420150206-300x73.png"></p><p>用文本编辑器打开frpc.ini，与服务端类似，内容如下。</p><blockquote><p>[common]</p><p>server_addr = x.x.x.x</p><p>server_port = 7000</p><p>token = 12345678</p><p>[rdp]</p><p>type = tcp</p><p>local_ip = 127.0.0.1</p><p>local_port = 3389</p><p>remote_port = 7001</p></blockquote><p>因为我这里以远程桌面来演示，所以就没有添加其他的协议。具体参考frps_full.ini中的配置。</p><p>在当前目录下打开cmd窗口，我把背景换成了白色。</p><p>执行  frpc -c frpc.ini</p><p><img src="https://zgao.top//wp-content/uploads/2019/04/TIM%E6%88%AA%E5%9B%BE20190420150921-300x121.png"></p><p>不要关闭命令行窗口，此时可以在局域网外使用相应程序访问 x.x.x.x:xxxx （IP为VPS的IP，端口为自定义的remote_port）即可访问到相应服务。</p><p>此时我们在另外一台机器上进行远程桌面连接进行测试。</p><p><img src="https://zgao.top//wp-content/uploads/2019/04/TIM%E6%88%AA%E5%9B%BE20190420152739-300x124.png"></p><p>这是我在寝室里演示的，最右边那台主机用树莓派的公网ip加端口成功连接上中间那台内网主机，实现了内网穿透。</p><p>大功告成！！！</p><p>———————(本文转载)——————————-</p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;树莓派内网穿透&quot;&gt;&lt;a href=&quot;#树莓派内网穿透&quot; class=&quot;headerlink&quot; title=&quot;树莓派内网穿透&quot;&gt;&lt;/a&gt;树莓派内网穿透&lt;/h2&gt;</summary>
    
    
    
    <category term="树莓派" scheme="https://xuyuquan0713.github.io/categories/%E6%A0%91%E8%8E%93%E6%B4%BE/"/>
    
    
    <category term="树莓派" scheme="https://xuyuquan0713.github.io/tags/%E6%A0%91%E8%8E%93%E6%B4%BE/"/>
    
  </entry>
  
  <entry>
    <title>常用的Linux命令</title>
    <link href="https://xuyuquan0713.github.io/2021/04/07/linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    <id>https://xuyuquan0713.github.io/2021/04/07/linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</id>
    <published>2021-04-06T16:00:00.000Z</published>
    <updated>2022-03-10T09:13:30.088Z</updated>
    
    <content type="html"><![CDATA[<hr><h1 id="常用的-linux-命令"><a href="#常用的-linux-命令" class="headerlink" title="常用的 linux 命令"></a>常用的 linux 命令</h1><hr><span id="more"></span><h1 id="ls"><a href="#ls" class="headerlink" title="ls"></a>ls</h1><p>就是 list 的缩写，通过 ls 命令不仅可以查看 linux 文件夹包含的文件，而且可以查看文件权限(包括目录、文件夹、文件权限)查看目录信息等等。</p><p><strong>常用参数搭配：</strong></p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token function">ls</span> -a <span class="token comment">#列出目录所有文件，包含以.开始的隐藏文件</span><span class="token function">ls</span> -A <span class="token comment">#列出除.及..的其它文件</span><span class="token function">ls</span> -r <span class="token comment">#反序排列</span><span class="token function">ls</span> -t <span class="token comment">#以文件修改时间排序</span><span class="token function">ls</span> -S <span class="token comment">#以文件大小排序</span><span class="token function">ls</span> -h <span class="token comment">#以易读大小显示</span><span class="token function">ls</span> -l <span class="token comment">#除了文件名之外，还将文件的权限、所有者、文件大小等信息详细列出来</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>实例：</strong></p><ol><li>按易读方式按时间反序排序，并显示文件详细信息</li></ol><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token function">ls</span> -lhrt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="2"><li>按大小反序显示文件详细信息</li></ol><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">ls -lrS<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="3"><li>列出当前目录中所有以”t”开头的目录的详细内容</li></ol><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">ls -l t*<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="4"><li>列出文件绝对路径（不包含隐藏文件）</li></ol><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">ls | sed &quot;s:^:&#96;pwd&#96;&#x2F;:&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="5"><li>列出文件绝对路径（包含隐藏文件）</li></ol><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">find $pwd -maxdepth 1 | xargs ls -ld<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="cd"><a href="#cd" class="headerlink" title="cd"></a>cd</h1><p>cd(changeDirectory) 命令语法：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token builtin class-name">cd</span> <span class="token punctuation">[</span>目录名<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>说明：切换当前目录至 dirName。</p><p><strong>实例：</strong></p><ol><li>进入要目录</li></ol><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">cd &#x2F;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="2"><li>进入 “home” 目录</li></ol><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">cd ~<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="3"><li>进入上一次工作路径</li></ol><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">cd -<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="4"><li>把上个命令的参数作为 cd 参数使用。</li></ol><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">cd !$<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="pwd"><a href="#pwd" class="headerlink" title="pwd"></a>pwd</h1><p>pwd 命令用于查看当前工作目录路径。</p><p><strong>实例：</strong></p><ol><li>查看当前路径</li></ol><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">pwd<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="2"><li>查看软链接的实际路径</li></ol><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">pwd -P<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="mkdir"><a href="#mkdir" class="headerlink" title="mkdir"></a>mkdir</h1><p>mkdir 命令用于创建文件夹。</p><p><strong>可用选项：</strong></p><ul><li>-m: 对新建目录设置存取权限，也可以用 chmod 命令设置;</li><li>-p: 可以是一个路径名称。此时若路径中的某些目录尚不存在,加上此选项后，系统将自动建立好那些尚不在的目录，即一次可以建立多个目录。</li></ul><p><strong>实例：</strong></p><ol><li>当前工作目录下创建名为 t 的文件夹</li></ol><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">mkdir t<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="2"><li>在 tmp 目录下创建路径为 test/t1/t 的目录，若不存在，则创建：</li></ol><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">mkdir -p &#x2F;tmp&#x2F;test&#x2F;t1&#x2F;t<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="rm"><a href="#rm" class="headerlink" title="rm"></a>rm</h1><p>删除一个目录中的一个或多个文件或目录，如果没有使用 -r 选项，则 rm 不会删除目录。如果使用 rm 来删除文件，通常仍可以将该文件恢复原状。</p><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">rm [选项] 文件…<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>实例：</strong></p><ol><li>删除任何 .log 文件，删除前逐一询问确认：</li></ol><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">rm -i *.log<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="2"><li>删除 test 子目录及子目录中所有档案删除，并且不用一一确认：</li></ol><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">rm -rf test<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="3"><li>删除以 -f 开头的文件</li></ol><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">rm -- -f*<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="rmdir"><a href="#rmdir" class="headerlink" title="rmdir"></a>rmdir</h1><p>从一个目录中删除一个或多个子目录项，删除某目录时也必须具有对其父目录的写权限。</p><p><em>注意：不能删除非空目录</em></p><p><strong>实例：</strong></p><ol><li>当 parent 子目录被删除后使它也成为空目录的话，则顺便一并删除：</li></ol><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">rmdir -p parent&#x2F;child&#x2F;child11<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="mv"><a href="#mv" class="headerlink" title="mv"></a>mv</h1><p>移动文件或修改文件名，根据第二参数类型（如目录，则移动文件；如为文件则重命令该文件）。</p><p>当第二个参数为目录时，第一个参数可以是多个以空格分隔的文件或目录，然后移动第一个参数指定的多个文件到第二个参数指定的目录中。</p><p><strong>实例：</strong></p><ol><li>将文件 test.log 重命名为 test1.txt</li></ol><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">mv test.log test1.txt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="2"><li>将文件 log1.txt,log2.txt,log3.txt 移动到根的 test3 目录中</li></ol><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">mv llog1.txt log2.txt log3.txt &#x2F;test3<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="3"><li>将文件 file1 改名为 file2，如果 file2 已经存在，则询问是否覆盖</li></ol><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">mv -i log1.txt log2.txt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="4"><li>移动当前文件夹下的所有文件到上一级目录</li></ol><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">mv * ..&#x2F;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="cp"><a href="#cp" class="headerlink" title="cp"></a>cp</h1><p>将源文件复制至目标文件，或将多个源文件复制至目标目录。</p><p>注意：命令行复制，如果目标文件已经存在会提示是否覆盖，而在 shell 脚本中，如果不加 -i 参数，则不会提示，而是直接覆盖！</p><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">-i #提示-r #复制目录及目录内所有项目-a #复制的文件与原文件时间一样<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>实例：</strong></p><ol><li>复制 a.txt 到 test 目录下，保持原文件时间，如果原文件存在提示是否覆盖。</li></ol><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">cp -ai a.txt test<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="2"><li>为 a.txt 建议一个链接（快捷方式）</li></ol><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">cp -s a.txt link_a.txt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="cat"><a href="#cat" class="headerlink" title="cat"></a>cat</h1><p>cat 主要有三大功能：</p><ol><li>一次显示整个文件:</li></ol><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">cat filename<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="2"><li>从键盘创建一个文件:</li></ol><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">cat &gt; filename<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>只能创建新文件，不能编辑已有文件。</p><ol start="3"><li>将几个文件合并为一个文件:</li></ol><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">cat file1 file2 &gt; file<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>-b 对非空输出行号</li><li>-n 输出所有行号</li></ul><p><strong>实例：</strong></p><ol><li>把 log2012.log 的文件内容加上行号后输入 log2013.log 这个文件里</li></ol><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">cat -n log2012.log log2013.log<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="2"><li>把 log2012.log 和 log2013.log 的文件内容加上行号（空白行不加）之后将内容附加到 log.log 里</li></ol><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">cat -b log2012.log log2013.log log.log<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="3"><li>使用 here doc 生成新文件</li></ol><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">cat &gt;log.txt &lt;&lt;EOF&gt;Hello&gt;World&gt;PWD&#x3D;$(pwd)&gt;EOFls -l log.txtcat log.txtHelloWorldPWD&#x3D;&#x2F;opt&#x2F;soft&#x2F;test<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="4"><li>反向列示</li></ol><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">tac log.txtPWD&#x3D;&#x2F;opt&#x2F;soft&#x2F;testWorldHello<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h1 id="more"><a href="#more" class="headerlink" title="more"></a>more</h1><p>功能类似于 cat, more 会以一页一页的显示方便使用者逐页阅读，而最基本的指令就是按空白键（space）就往下一页显示，按 b 键就会往回（back）一页显示。</p><p><strong>命令参数：</strong></p><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">+n      #从笫 n 行开始显示-n       #定义屏幕大小为n行+&#x2F;pattern #在每个档案显示前搜寻该字串（pattern），然后从该字串前两行之后开始显示-c       #从顶部清屏，然后显示-d       #提示“Press space to continue，’q’ to quit（按空格键继续，按q键退出）”，禁用响铃功能-l        #忽略Ctrl+l（换页）字符-p       #通过清除窗口而不是滚屏来对文件进行换页，与-c选项相似-s       #把连续的多个空行显示为一行-u       #把文件内容中的下画线去掉<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>常用操作命令：</strong></p><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">Enter    #向下 n 行，需要定义。默认为 1 行Ctrl+F   #向下滚动一屏空格键  #向下滚动一屏Ctrl+B  #返回上一屏&#x3D;       #输出当前行的行号:f     #输出文件名和当前行的行号V      #调用vi编辑器!命令   #调用Shell，并执行命令q       #退出more<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>实例：</strong></p><ol><li>显示文件中从第 3 行起的内容</li></ol><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">more +3 text.txt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="2"><li>在所列出文件目录详细信息，借助管道使每次显示 5 行</li></ol><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">ls -l | more -5<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>按空格显示下 5 行。</p><h1 id="less"><a href="#less" class="headerlink" title="less"></a>less</h1><p>less 与 more 类似，但使用 less 可以随意浏览文件，而 more 仅能向前移动，却不能向后移动，而且 less 在查看之前不会加载整个文件。</p><p><strong>常用命令参数：</strong></p><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">-i  忽略搜索时的大小写-N  显示每行的行号-o  &lt;文件名&gt; 将less 输出的内容在指定文件中保存起来-s  显示连续空行为一行&#x2F;字符串：向下搜索“字符串”的功能?字符串：向上搜索“字符串”的功能n：重复前一个搜索（与 &#x2F; 或 ? 有关）N：反向重复前一个搜索（与 &#x2F; 或 ? 有关）-x &lt;数字&gt; 将“tab”键显示为规定的数字空格b  向后翻一页d  向后翻半页h  显示帮助界面Q  退出less 命令u  向前滚动半页y  向前滚动一行空格键 滚动一行回车键 滚动一页[pagedown]： 向下翻动一页[pageup]：   向上翻动一页<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>实例：</strong></p><ol><li>ps 查看进程信息并通过 less 分页显示</li></ol><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">ps -aux | less -N<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="2"><li>查看多个文件</li></ol><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">less 1.log 2.log<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>可以使用 n 查看下一个，使用 p 查看前一个。</p><h1 id="head"><a href="#head" class="headerlink" title="head"></a>head</h1><p>head 用来显示档案的开头至标准输出中，默认 head 命令打印其相应文件的开头 10 行。</p><p><strong>常用参数：</strong></p><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">-n&lt;行数&gt; 显示的行数（行数为复数表示从最后向前数）<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>实例：</strong></p><ol><li>显示 1.log 文件中前 20 行</li></ol><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">head 1.log -n 20<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="2"><li>显示 1.log 文件前 20 字节</li></ol><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">head -c 20 log2014.log<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="3"><li>显示 t.log 最后 10 行</li></ol><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">head -n -10 t.log<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="tail"><a href="#tail" class="headerlink" title="tail"></a>tail</h1><p>用于显示指定文件末尾内容，不指定文件时，作为输入信息进行处理。常用查看日志文件。</p><p><strong>常用参数：</strong></p><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">-f 循环读取（常用于查看递增的日志文件）-n&lt;行数&gt; 显示行数（从后向前）<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ol><li>循环读取逐渐增加的文件内容</li></ol><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">ping 127.0.0.1 &gt; ping.log &amp;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>后台运行：可使用 jobs -l 查看，也可使用 fg 将其移到前台运行。</p><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">tail -f ping.log（查看日志）<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h1 id="which"><a href="#which" class="headerlink" title="which"></a>which</h1><p>在 linux 要查找某个文件，但不知道放在哪里了，可以使用下面的一些命令来搜索：</p><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">which     查看可执行文件的位置。whereis 查看文件的位置。locate  配合数据库查看文件位置。find        实际搜寻硬盘查询文件名称。which 是在 PATH 就是指定的路径中，搜索某个系统命令的位置，并返回第一个搜索结果。使用 which 命令，就可以看到某个系统命令是否存在，以及执行的到底是哪一个位置的命令。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>常用参数：</strong></p><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">-n 　指定文件名长度，指定的长度必须大于或等于所有文件中最长的文件名。<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>实例：</strong></p><ol><li>查看 ls 命令是否存在，执行哪个</li></ol><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">which ls<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="2"><li>查看 which</li></ol><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">which which<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="3"><li>查看 cd</li></ol><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">which cd（显示不存在，因为 cd 是内建命令，而 which 查找显示是 PATH 中的命令）<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>查看当前 PATH 配置：</p><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">echo $PATH<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>或使用 env 查看所有环境变量及对应值</p><h1 id="whereis"><a href="#whereis" class="headerlink" title="whereis"></a>whereis</h1><p>whereis 命令只能用于程序名的搜索，而且只搜索二进制文件（参数-b）、man 说明文件（参数-m）和源代码文件（参数-s）。如果省略参数，则返回所有信息。whereis 及 locate 都是基于系统内建的数据库进行搜索，因此效率很高，而 find 则是遍历硬盘查找文件。</p><p><strong>常用参数：</strong></p><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">-b   定位可执行文件。-m   定位帮助文件。-s   定位源代码文件。-u   搜索默认路径下除可执行文件、源代码文件、帮助文件以外的其它文件。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong>实例：</strong></p><ol><li>查找 locate 程序相关文件</li></ol><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">whereis locate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="2"><li>查找 locate 的源码文件</li></ol><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">whereis -s locate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="3"><li>查找 lcoate 的帮助文件</li></ol><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">whereis -m locate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="locate"><a href="#locate" class="headerlink" title="locate"></a>locate</h1><p>locate 通过搜寻系统内建文档数据库达到快速找到档案，数据库由 updatedb 程序来更新，updatedb 是由 cron daemon 周期性调用的。默认情况下 locate 命令在搜寻数据库时比由整个由硬盘资料来搜寻资料来得快，但较差劲的是 locate 所找到的档案若是最近才建立或 刚更名的，可能会找不到，在内定值中，updatedb 每天会跑一次，可以由修改 crontab 来更新设定值 (etc/crontab)。</p><p>locate 与 find 命令相似，可以使用如 *、? 等进行正则匹配查找</p><p><strong>常用参数：</strong></p><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">-l num（要显示的行数）-f   将特定的档案系统排除在外，如将proc排除在外-r   使用正则运算式做为寻找条件<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>实例：</strong></p><ol><li>查找和 pwd 相关的所有文件(文件名中包含 pwd）</li></ol><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">locate pwd<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="2"><li>搜索 etc 目录下所有以 sh 开头的文件</li></ol><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">locate &#x2F;etc&#x2F;sh<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="3"><li>查找 /var 目录下，以 reason 结尾的文件</li></ol><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">locate -r &#39;^&#x2F;var.*reason$&#39;（其中.表示一个字符，*表示任务多个；.*表示任意多个字符）<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="find"><a href="#find" class="headerlink" title="find"></a>find</h1><p>用于在文件树中查找文件，并作出相应的处理。</p><p><strong>命令格式：</strong></p><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">find pathname -options [-print -exec -ok ...]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>命令参数：</strong></p><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">pathname: find命令所查找的目录路径。例如用.来表示当前目录，用&#x2F;来表示系统根目录。-print： find命令将匹配的文件输出到标准输出。-exec： find命令对匹配的文件执行该参数所给出的shell命令。相应命令的形式为&#39;command&#39; &#123;  &#125; \;，注意&#123;   &#125;和\；之间的空格。-ok： 和-exec的作用相同，只不过以一种更为安全的模式来执行该参数所给出的shell命令，在执行每一个命令之前，都会给出提示，让用户来确定是否执行。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong>命令选项：</strong></p><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">-name 按照文件名查找文件-perm 按文件权限查找文件-user 按文件属主查找文件-group  按照文件所属的组来查找文件。-type  查找某一类型的文件，诸如：   b - 块设备文件   d - 目录   c - 字符设备文件   l - 符号链接文件   p - 管道文件   f - 普通文件-size n :[c] 查找文件长度为n块文件，带有c时表文件字节大小-amin n   查找系统中最后N分钟访问的文件-atime n  查找系统中最后n*24小时访问的文件-cmin n   查找系统中最后N分钟被改变文件状态的文件-ctime n  查找系统中最后n*24小时被改变文件状态的文件-mmin n   查找系统中最后N分钟被改变文件数据的文件-mtime n  查找系统中最后n*24小时被改变文件数据的文件(用减号-来限定更改时间在距今n日以内的文件，而用加号+来限定更改时间在距今n日以前的文件。 )-maxdepth n 最大查找目录深度-prune 选项来指出需要忽略的目录。在使用-prune选项时要当心，因为如果你同时使用了-depth选项，那么-prune选项就会被find命令忽略-newer 如果希望查找更改时间比某个文件新但比另一个文件旧的所有文件，可以使用-newer选项<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>实例：</strong></p><ol><li>查找 48 小时内修改过的文件</li></ol><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">find -atime -2<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="2"><li>在当前目录查找 以 .log 结尾的文件。 . 代表当前目录</li></ol><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">find .&#x2F; -name &#39;*.log&#39;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="3"><li>查找 /opt 目录下 权限为 777 的文件</li></ol><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">find &#x2F;opt -perm 777<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="4"><li>查找大于 1K 的文件</li></ol><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">find -size +1000c<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>查找等于 1000 字符的文件</p><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">find -size 1000c-exec 参数后面跟的是 command 命令，它的终止是以 ; 为结束标志的，所以这句命令后面的分号是不可缺少的，考虑到各个系统中分号会有不同的意义，所以前面加反斜杠。&#123;&#125; 花括号代表前面find查找出来的文件名。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>实例：</strong></p><ol start="5"><li>在当前目录中查找更改时间在 10 日以前的文件并删除它们(无提醒）</li></ol><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">find . -type f -mtime +10 -exec rm -f &#123;&#125; \;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="6"><li>当前目录中查找所有文件名以.log 结尾、更改时间在 5 日以上的文件，并删除它们，只不过在删除之前先给出提示。 按 y 键删除文件，按 n 键不删除</li></ol><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">find . -name &#39;*.log&#39; mtime +5 -ok -exec rm &#123;&#125; \;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="7"><li>当前目录下查找文件名以 passwd 开头，内容包含 “pkg” 字符的文件</li></ol><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">find . -f -name &#39;passwd*&#39; -exec grep &quot;pkg&quot; &#123;&#125; \;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="8"><li>用 exec 选项执行 cp 命令</li></ol><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">find . -name &#39;*.log&#39; -exec cp &#123;&#125; test3 \;-xargs find 命令把匹配到的文件传递给 xargs 命令，而 xargs 命令每次只获取一部分文件而不是全部，不像 -exec 选项那样。这样它可以先处理最先获取的一部分文件，然后是下一批，并如此继续下去。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>实例：</strong></p><ol start="9"><li>查找当前目录下每个普通文件，然后使用 xargs 来判断文件类型</li></ol><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">find . -type f -print | xargs file<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="10"><li>查找当前目录下所有以 js 结尾的并且其中包含 ‘editor’ 字符的普通文件</li></ol><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">find . -type f -name &quot;*.js&quot; -exec grep -lF &#39;ueditor&#39; &#123;&#125; \;find -type f -name &#39;*.js&#39; | xargs grep -lF &#39;editor&#39;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ol start="11"><li>利用 xargs 执行 mv 命令</li></ol><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">find . -name &quot;*.log&quot; | xargs -i mv &#123;&#125; test4<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="12"><li>用 grep 命令在当前目录下的所有普通文件中搜索 hostnames 这个词，并标出所在行：</li></ol><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">find . -name \*(转义） -type f -print | xargs grep -n &#39;hostnames&#39;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="13"><li>查找当前目录中以一个小写字母开头，最后是 4 到 9 加上 .log 结束的文件：</li></ol><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">find . -name &#39;[a-z]*[4-9].log&#39; -print<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="14"><li>在 test 目录查找不在 test4 子目录查找</li></ol><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">find test -path &#39;test&#x2F;test4&#39; -prune -o -print<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="15"><li>实例 1：查找更改时间比文件 log2012.log 新但比文件 log2017.log 旧的文件</li></ol><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">find -newer log2012.log ! -newer log2017.log<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>使用 depth 选项：</strong></p><p>depth 选项可以使 find 命令向磁带上备份文件系统时，希望首先备份所有的文件，其次再备份子目录中的文件。</p><p>实例：find 命令从文件系统的根目录开始，查找一个名为 CON.FILE 的文件。 它将首先匹配所有的文件然后再进入子目录中查找</p><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">find &#x2F; -name &quot;CON.FILE&quot; -depth -print<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="chmod"><a href="#chmod" class="headerlink" title="chmod"></a>chmod</h1><p>用于改变 linux 系统文件或目录的访问权限。用它控制文件或目录的访问权限。该命令有两种用法。一种是包含字母和操作符表达式的文字设定法；另一种是包含数字的数字设定法。</p><p>每一文件或目录的访问权限都有三组，每组用三位表示，分别为文件属主的读、写和执行权限；与属主同组的用户的读、写和执行权限；系统中其他用户的读、写和执行权限。可使用 ls -l test.txt 查找。</p><p>以文件 log2012.log 为例：</p><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">-rw-r--r-- 1 root root 296K 11-13 06:03 log2012.log<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>第一列共有 10 个位置，第一个字符指定了文件类型。在通常意义上，一个目录也是一个文件。如果第一个字符是横线，表示是一个非目录的文件。如果是 d，表示是一个目录。从第二个字符开始到第十个 9 个字符，3 个字符一组，分别表示了 3 组用户对文件或者目录的权限。权限字符用横线代表空许可，r 代表只读，w 代表写，x 代表可执行。</p><p><strong>常用参数：</strong></p><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">-c 当发生改变时，报告处理信息-R 处理指定目录以及其子目录下所有文件<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>权限范围：</strong></p><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">u ：目录或者文件的当前的用户g ：目录或者文件的当前的群组o ：除了目录或者文件的当前用户或群组之外的用户或者群组a ：所有的用户及群组<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong>权限代号：</strong></p><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">r ：读权限，用数字4表示w ：写权限，用数字2表示x ：执行权限，用数字1表示- ：删除权限，用数字0表示s ：特殊权限<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>实例：</strong></p><ol><li>增加文件 t.log 所有用户可执行权限</li></ol><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">chmod a+x t.log<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="2"><li>撤销原来所有的权限，然后使拥有者具有可读权限,并输出处理信息</li></ol><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">chmod u&#x3D;r t.log -c<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="3"><li>给 file 的属主分配读、写、执行(7)的权限，给 file 的所在组分配读、执行(5)的权限，给其他用户分配执行(1)的权限</li></ol><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">chmod 751 t.log -c（或者：chmod u&#x3D;rwx,g&#x3D;rx,o&#x3D;x t.log -c)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="4"><li>将 test 目录及其子目录所有文件添加可读权限</li></ol><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">chmod u+r,g+r,o+r -R text&#x2F; -c19、tar 命令<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>用来压缩和解压文件。tar 本身不具有压缩功能，只具有打包功能，有关压缩及解压是调用其它的功能来完成。</p><p><em>弄清两个概念：打包和压缩。打包是指将一大堆文件或目录变成一个总的文件；压缩则是将一个大的文件通过一些压缩算法变成一个小文件</em></p><p><strong>常用参数：</strong></p><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">-c 建立新的压缩文件-f 指定压缩文件-r 添加文件到已经压缩文件包中-u 添加改了和现有的文件到压缩包中-x 从压缩包中抽取文件-t 显示压缩文件中的内容-z 支持gzip压缩-j 支持bzip2压缩-Z 支持compress解压文件-v 显示操作过程<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>有关 gzip 及 bzip2 压缩:</strong></p><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">gzip 实例：压缩 gzip fileName .tar.gz 和.tgz  解压：gunzip filename.gz 或 gzip -d filename.gz          对应：tar zcvf filename.tar.gz     tar zxvf filename.tar.gzbz2实例：压缩 bzip2 -z filename .tar.bz2 解压：bunzip filename.bz2或bzip -d filename.bz2       对应：tar jcvf filename.tar.gz         解压：tar jxvf filename.tar.bz2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>实例：</strong></p><ol><li>将文件全部打包成 tar 包</li></ol><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">tar -cvf log.tar 1.log,2.log 或tar -cvf log.*<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="2"><li>将 /etc 下的所有文件及目录打包到指定目录，并使用 gz 压缩</li></ol><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">tar -zcvf &#x2F;tmp&#x2F;etc.tar.gz &#x2F;etc<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="3"><li>查看刚打包的文件内容（一定加 z，因为是使用 gzip 压缩的）</li></ol><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">tar -ztvf &#x2F;tmp&#x2F;etc.tar.gz<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="4"><li>要压缩打包 /home, /etc ，但不要 /home/dmtsai</li></ol><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">tar --exclude &#x2F;home&#x2F;dmtsai -zcvf myfile.tar.gz &#x2F;home&#x2F;* &#x2F;etc<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="chown"><a href="#chown" class="headerlink" title="chown"></a>chown</h1><p>chown 将指定文件的拥有者改为指定的用户或组，用户可以是用户名或者用户 ID；组可以是组名或者组 ID；文件是以空格分开的要改变权限的文件列表，支持通配符。</p><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">-c 显示更改的部分的信息-R 处理指定目录及子目录<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>实例：</strong></p><ol><li>改变拥有者和群组 并显示改变信息</li></ol><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">chown -c mail:mail log2012.log<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="2"><li>改变文件群组</li></ol><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">chown -c :mail t.log<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="3"><li>改变文件夹及子文件目录属主及属组为 mail</li></ol><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">chown -cR mail: test&#x2F;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="df"><a href="#df" class="headerlink" title="df"></a>df</h1><p>显示磁盘空间使用情况。获取硬盘被占用了多少空间，目前还剩下多少空间等信息，如果没有文件名被指定，则所有当前被挂载的文件系统的可用空间将被显示。默认情况下，磁盘空间将以 1KB 为单位进行显示，除非环境变量 POSIXLY_CORRECT 被指定，那样将以 512 字节为单位进行显示：</p><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">-a 全部文件系统列表-h 以方便阅读的方式显示信息-i 显示inode信息-k 区块为1024字节-l 只显示本地磁盘-T 列出文件系统类型<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>实例：</strong></p><ol><li>显示磁盘使用情况</li></ol><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">df -l<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="2"><li>以易读方式列出所有文件系统及其类型</li></ol><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">df -haT<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="du"><a href="#du" class="headerlink" title="du"></a>du</h1><p>du 命令也是查看使用空间的，但是与 df 命令不同的是 Linux du 命令是对文件和目录磁盘使用的空间的查看：</p><p><strong>命令格式：</strong></p><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">du [选项] [文件]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>常用参数：</strong></p><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">-a 显示目录中所有文件大小-k 以KB为单位显示文件大小-m 以MB为单位显示文件大小-g 以GB为单位显示文件大小-h 以易读方式显示文件大小-s 仅显示总计-c或--total  除了显示个别目录或文件的大小外，同时也显示所有目录或文件的总和<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>实例：</strong></p><ol><li>以易读方式显示文件夹内及子文件夹大小</li></ol><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">du -h scf&#x2F;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="2"><li>以易读方式显示文件夹内所有文件大小</li></ol><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">du -ah scf&#x2F;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="3"><li>显示几个文件或目录各自占用磁盘空间的大小，还统计它们的总和</li></ol><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">du -hc test&#x2F; scf&#x2F;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="4"><li>输出当前目录下各个子目录所使用的空间</li></ol><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">du -hc --max-depth&#x3D;1 scf&#x2F;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="ln"><a href="#ln" class="headerlink" title="ln"></a>ln</h1><p>功能是为文件在另外一个位置建立一个同步的链接，当在不同目录需要该问题时，就不需要为每一个目录创建同样的文件，通过 ln 创建的链接（link）减少磁盘占用量。</p><p><em>链接分类：软件链接及硬链接</em></p><p><strong>软链接：</strong></p><ol><li>软链接，以路径的形式存在。类似于 Windows 操作系统中的快捷方式</li><li>软链接可以 跨文件系统 ，硬链接不可以</li><li>软链接可以对一个不存在的文件名进行链接</li><li>软链接可以对目录进行链接</li></ol><p><strong>硬链接:</strong></p><ol><li>硬链接，以文件副本的形式存在。但不占用实际空间。</li><li>不允许给目录创建硬链接</li><li>硬链接只有在同一个文件系统中才能创建</li></ol><p><strong>需要注意：</strong></p><p>第一：ln 命令会保持每一处链接文件的同步性，也就是说，不论你改动了哪一处，其它的文件都会发生相同的变化；<br>第二：ln 的链接又分软链接和硬链接两种，软链接就是 ln –s 源文件 目标文件，它只会在你选定的位置上生成一个文件的镜像，不会占用磁盘空间，硬链接 ln 源文件 目标文件，没有参数-s， 它会在你选定的位置上生成一个和源文件大小相同的文件，无论是软链接还是硬链接，文件都保持同步变化。<br>第三：ln 指令用在链接文件或目录，如同时指定两个以上的文件或目录，且最后的目的地是一个已经存在的目录，则会把前面指定的所有文件或目录复制到该目录中。若同时指定多个文件或目录，且最后的目的地并非是一个已存在的目录，则会出现错误信息。</p><p><strong>常用参数：</strong></p><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">-b 删除，覆盖以前建立的链接-s 软链接（符号链接）-v 显示详细处理过程<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>实例：</strong></p><ol><li>给文件创建软链接，并显示操作信息</li></ol><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">ln -sv source.log link.log<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="2"><li>给文件创建硬链接，并显示操作信息</li></ol><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">ln -v source.log link1.log<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="3"><li>给目录创建软链接</li></ol><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">ln -sv &#x2F;opt&#x2F;soft&#x2F;test&#x2F;test3 &#x2F;opt&#x2F;soft&#x2F;test&#x2F;test5<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="date"><a href="#date" class="headerlink" title="date"></a>date</h1><p>显示或设定系统的日期与时间。</p><p><strong>命令参数：</strong></p><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">-d&lt;字符串&gt; 　显示字符串所指的日期与时间。字符串前后必须加上双引号。-s&lt;字符串&gt; 　根据字符串来设置日期与时间。字符串前后必须加上双引号。-u 　显示GMT。%H 小时(00-23)%I 小时(00-12)%M 分钟(以00-59来表示)%s 总秒数。起算时间为1970-01-01 00:00:00 UTC。%S 秒(以本地的惯用法来表示)%a 星期的缩写。%A 星期的完整名称。%d 日期(以01-31来表示)。%D 日期(含年月日)。%m 月份(以01-12来表示)。%y 年份(以00-99来表示)。%Y 年份(以四位数来表示)。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>实例：</strong></p><ol><li>显示下一天</li></ol><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">date +%Y%m%d --date&#x3D;&quot;+1 day&quot;  #显示下一天的日期<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="2"><li>-d 参数使用</li></ol><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">date -d &quot;nov 22&quot;  今年的 11 月 22 日是星期三date -d &#39;2 weeks&#39; 2周后的日期date -d &#39;next monday&#39; (下周一的日期)date -d next-day +%Y%m%d（明天的日期）或者：date -d tomorrow +%Y%m%ddate -d last-day +%Y%m%d(昨天的日期) 或者：date -d yesterday +%Y%m%ddate -d last-month +%Y%m(上个月是几月)date -d next-month +%Y%m(下个月是几月)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="cal"><a href="#cal" class="headerlink" title="cal"></a>cal</h1><p>可以用户显示公历（阳历）日历如只有一个参数，则表示年份(1-9999)，如有两个参数，则表示月份和年份：</p><p><strong>常用参数：</strong></p><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">-3 显示前一月，当前月，后一月三个月的日历-m 显示星期一为第一列-j 显示在当前年第几天-y [year]显示当前年[year]份的日历<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong>实例：</strong></p><ol><li>显示指定年月日期</li></ol><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">cal 9 2012<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="2"><li>显示 2013 年每个月日历</li></ol><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">cal -y 2013<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="3"><li>将星期一做为第一列,显示前中后三月</li></ol><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">cal -3m<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="grep"><a href="#grep" class="headerlink" title="grep"></a>grep</h1><p>强大的文本搜索命令，grep(Global Regular Expression Print) 全局正则表达式搜索。</p><p>grep 的工作方式是这样的，它在一个或多个文件中搜索字符串模板。如果模板包括空格，则必须被引用，模板后的所有字符串被看作文件名。搜索的结果被送到标准输出，不影响原文件内容。</p><p><strong>命令格式：</strong></p><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">grep [option] pattern file|dir<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>常用参数：</strong></p><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">-A n --after-context显示匹配字符后n行-B n --before-context显示匹配字符前n行-C n --context 显示匹配字符前后n行-c --count 计算符合样式的列数-i 忽略大小写-l 只列出文件内容符合指定的样式的文件名称-f 从文件中读取关键词-n 显示匹配内容的所在文件中行数-R 递归查找文件夹<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>grep 的规则表达式:</strong></p><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">^  #锚定行的开始 如：&#39;^grep&#39;匹配所有以grep开头的行。$  #锚定行的结束 如：&#39;grep$&#39;匹配所有以grep结尾的行。.  #匹配一个非换行符的字符 如：&#39;gr.p&#39;匹配gr后接一个任意字符，然后是p。*  #匹配零个或多个先前字符 如：&#39;*grep&#39;匹配所有一个或多个空格后紧跟grep的行。.*   #一起用代表任意字符。[]   #匹配一个指定范围内的字符，如&#39;[Gg]rep&#39;匹配Grep和grep。[^]  #匹配一个不在指定范围内的字符，如：&#39;[^A-FH-Z]rep&#39;匹配不包含A-R和T-Z的一个字母开头，紧跟rep的行。\(..\)  #标记匹配字符，如&#39;\(love\)&#39;，love被标记为1。\&lt;      #锚定单词的开始，如:&#39;\&lt;grep&#39;匹配包含以grep开头的单词的行。\&gt;      #锚定单词的结束，如&#39;grep\&gt;&#39;匹配包含以grep结尾的单词的行。x\&#123;m\&#125;  #重复字符x，m次，如：&#39;0\&#123;5\&#125;&#39;匹配包含5个o的行。x\&#123;m,\&#125;  #重复字符x,至少m次，如：&#39;o\&#123;5,\&#125;&#39;匹配至少有5个o的行。x\&#123;m,n\&#125;  #重复字符x，至少m次，不多于n次，如：&#39;o\&#123;5,10\&#125;&#39;匹配5--10个o的行。\w    #匹配文字和数字字符，也就是[A-Za-z0-9]，如：&#39;G\w*p&#39;匹配以G后跟零个或多个文字或数字字符，然后是p。\W    #\w的反置形式，匹配一个或多个非单词字符，如点号句号等。\b    #单词锁定符，如: &#39;\bgrep\b&#39;只匹配grep。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>实例：</strong></p><ol><li>查找指定进程</li></ol><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">ps -ef | grep svn<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="2"><li>查找指定进程个数</li></ol><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">ps -ef | grep svn -c<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="3"><li>从文件中读取关键词</li></ol><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">cat test1.txt | grep -f key.log<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="4"><li>从文件夹中递归查找以 grep 开头的行，并只列出文件</li></ol><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">grep -lR &#39;^grep&#39; &#x2F;tmp<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="5"><li>查找非 x 开关的行内容</li></ol><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">grep &#39;^[^x]&#39; test.txt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="6"><li>显示包含 ed 或者 at 字符的内容行</li></ol><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">grep -E &#39;ed|at&#39; test.txt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="wc"><a href="#wc" class="headerlink" title="wc"></a>wc</h1><p>wc(word count)功能为统计指定的文件中字节数、字数、行数，并将统计结果输出</p><p><strong>命令格式：</strong></p><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">wc [option] file..<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>命令参数：</strong></p><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">-c 统计字节数-l 统计行数-m 统计字符数-w 统计词数，一个字被定义为由空白、跳格或换行字符分隔的字符串<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong>实例：</strong></p><ol><li>查找文件的 行数 单词数 字节数 文件名</li></ol><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">wc text.txt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>结果：</p><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">7     8     70     test.txt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="2"><li>统计输出结果的行数</li></ol><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">cat test.txt | wc -l<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="ps"><a href="#ps" class="headerlink" title="ps"></a>ps</h1><p>ps(process status)，用来查看当前运行的进程状态，一次性查看，如果需要动态连续结果使用 top</p><p><em>linux 上进程有 5 种状态:</em></p><ol><li>运行(正在运行或在运行队列中等待)</li><li>中断(休眠中, 受阻, 在等待某个条件的形成或接受到信号)</li><li>不可中断(收到信号不唤醒和不可运行, 进程必须等待直到有中断发生)</li><li>僵死(进程已终止, 但进程描述符存在, 直到父进程调用 wait4()系统调用后释放)</li><li>停止(进程收到 SIGSTOP, SIGSTP, SIGTIN, SIGTOU 信号后停止运行运行)</li></ol><p><em>ps 工具标识进程的 5 种状态码:</em></p><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">D 不可中断 uninterruptible sleep (usually IO)R 运行 runnable (on run queue)S 中断 sleepingT 停止 traced or stoppedZ 僵死 a defunct (”zombie”) process<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>命令参数：</strong></p><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">-A 显示所有进程a 显示所有进程-a 显示同一终端下所有进程c 显示进程真实名称e 显示环境变量f 显示进程间的关系r 显示当前终端运行的进程-aux 显示所有包含其它使用的进程<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>实例：</strong></p><ol><li>显示当前所有进程环境变量及进程间关系</li></ol><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">ps -ef<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="2"><li>显示当前所有进程</li></ol><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">ps -A<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="3"><li>与 grep 联用查找某进程</li></ol><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">ps -aux | grep apache<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="4"><li>找出与 cron 与 syslog 这两个服务有关的 PID 号码</li></ol><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">ps aux | grep &#39;(cron|syslog)&#39;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="top"><a href="#top" class="headerlink" title="top"></a>top</h1><p>显示当前系统正在执行的进程的相关信息，包括进程 ID、内存占用率、CPU 占用率等</p><p><strong>常用参数：</strong></p><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">-c 显示完整的进程命令-s 保密模式-p &lt;进程号&gt; 指定进程显示-n &lt;次数&gt;循环显示次数<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong>实例：</strong></p><p>1.</p><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">top - 14:06:23 up 70 days, 16:44,  2 users,  load average: 1.25, 1.32, 1.35Tasks: 206 total,   1 running, 205 sleeping,   0 stopped,   0 zombieCpu(s):  5.9%us,  3.4%sy,  0.0%ni, 90.4%id,  0.0%wa,  0.0%hi,  0.2%si,  0.0%stMem:  32949016k total, 14411180k used, 18537836k free,   169884k buffersSwap: 32764556k total,        0k used, 32764556k free,  3612636k cachedPID USER      PR  NI  VIRT  RES  SHR S %CPU %MEM    TIME+  COMMAND28894 root      22   0 1501m 405m  10m S 52.2  1.3   2534:16 java<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>前五行是当前系统情况整体的统计信息区。</p><ul><li>第一行，任务队列信息，同 uptime 命令的执行结果，具体参数说明情况如下：</li></ul><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">14:06:23 — 当前系统时间up 70 days, 16:44 — 系统已经运行了70天16小时44分钟（在这期间系统没有重启过的吆！）2 users — 当前有2个用户登录系统load average: 1.15, 1.42, 1.44 — load average后面的三个数分别是1分钟、5分钟、15分钟的负载情况。load average数据是每隔5秒钟检查一次活跃的进程数，然后按特定算法计算出的数值。如果这个数除以逻辑CPU的数量，结果高于5的时候就表明系统在超负荷运转了。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>第二行，Tasks — 任务（进程），具体信息说明如下：</li></ul><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">系统现在共有206个进程，其中处于运行中的有1个，205个在休眠（sleep），stoped状态的有0个，zombie状态（僵尸）的有0个。<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>第三行，cpu 状态信息，具体属性说明如下：</li></ul><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">5.9%us — 用户空间占用CPU的百分比。3.4% sy — 内核空间占用CPU的百分比。0.0% ni — 改变过优先级的进程占用CPU的百分比90.4% id — 空闲CPU百分比0.0% wa — IO等待占用CPU的百分比0.0% hi — 硬中断（Hardware IRQ）占用CPU的百分比0.2% si — 软中断（Software Interrupts）占用CPU的百分比<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>备注：在这里 CPU 的使用比率和 windows 概念不同，需要理解 linux 系统用户空间和内核空间的相关知识！</p><ul><li>第四行，内存状态，具体信息如下：</li></ul><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">32949016k total — 物理内存总量（32GB）14411180k used — 使用中的内存总量（14GB）18537836k free — 空闲内存总量（18GB）169884k buffers — 缓存的内存量 （169M）<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>第五行，swap 交换分区信息，具体信息说明如下：</li></ul><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">32764556k total — 交换区总量（32GB）0k used — 使用的交换区总量（0K）32764556k free — 空闲交换区总量（32GB）3612636k cached — 缓冲的交换区总量（3.6GB）<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>第六行，空行。</p></li><li><p>第七行以下：各进程（任务）的状态监控，项目列信息说明如下：</p></li></ul><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">PID — 进程idUSER — 进程所有者PR — 进程优先级NI — nice值。负值表示高优先级，正值表示低优先级VIRT — 进程使用的虚拟内存总量，单位kb。VIRT&#x3D;SWAP+RESRES — 进程使用的、未被换出的物理内存大小，单位kb。RES&#x3D;CODE+DATASHR — 共享内存大小，单位kbS — 进程状态。D&#x3D;不可中断的睡眠状态 R&#x3D;运行 S&#x3D;睡眠 T&#x3D;跟踪&#x2F;停止 Z&#x3D;僵尸进程%CPU — 上次更新到现在的CPU时间占用百分比%MEM — 进程使用的物理内存百分比TIME+ — 进程使用的CPU时间总计，单位1&#x2F;100秒COMMAND — 进程名称（命令名&#x2F;命令行）<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>top 交互命令</strong></p><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">h 显示top交互命令帮助信息c 切换显示命令名称和完整命令行m 以内存使用率排序P 根据CPU使用百分比大小进行排序T 根据时间&#x2F;累计时间进行排序W 将当前设置写入~&#x2F;.toprc文件中o或者O 改变显示项目的顺序<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="kill"><a href="#kill" class="headerlink" title="kill"></a>kill</h1><p>发送指定的信号到相应进程。不指定型号将发送 SIGTERM（15）终止指定进程。如果任无法终止该程序可用”-KILL” 参数，其发送的信号为 SIGKILL(9) ，将强制结束进程，使用 ps 命令或者 jobs 命令可以查看进程号。root 用户将影响用户的进程，非 root 用户只能影响自己的进程。</p><p><strong>常用参数：</strong></p><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">-l  信号，若果不加信号的编号参数，则使用“-l”参数会列出全部的信号名称-a  当处理当前进程时，不限制命令名和进程号的对应关系-p  指定kill 命令只打印相关进程的进程号，而不发送任何信号-s  指定发送信号-u  指定用户<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>实例：</strong></p><ol><li>先使用 ps 查找进程 pro1，然后用 kill 杀掉</li></ol><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">kill -9 $(ps -ef | grep pro1)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="free"><a href="#free" class="headerlink" title="free"></a>free</h1><p>显示系统内存使用情况，包括物理内存、交互区内存(swap)和内核缓冲区内存。</p><p><strong>命令参数：</strong></p><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">-b 以Byte显示内存使用情况-k 以kb为单位显示内存使用情况-m 以mb为单位显示内存使用情况-g 以gb为单位显示内存使用情况-s&lt;间隔秒数&gt; 持续显示内存-t 显示内存使用总合<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>实例：</strong></p><ol><li>显示内存使用情况</li></ol><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">freefree -kfree -m<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ol start="2"><li>以总和的形式显示内存的使用信息</li></ol><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">free -t<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="3"><li>周期性查询内存使用情况</li></ol><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">free -s 10<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
    
    
    <summary type="html">&lt;hr&gt;
&lt;h1 id=&quot;常用的-linux-命令&quot;&gt;&lt;a href=&quot;#常用的-linux-命令&quot; class=&quot;headerlink&quot; title=&quot;常用的 linux 命令&quot;&gt;&lt;/a&gt;常用的 linux 命令&lt;/h1&gt;&lt;hr&gt;</summary>
    
    
    
    <category term="Linux" scheme="https://xuyuquan0713.github.io/categories/Linux/"/>
    
    
    <category term="linux" scheme="https://xuyuquan0713.github.io/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>网站分享</title>
    <link href="https://xuyuquan0713.github.io/2021/04/04/%E7%BD%91%E7%AB%99%E5%88%86%E4%BA%AB/"/>
    <id>https://xuyuquan0713.github.io/2021/04/04/%E7%BD%91%E7%AB%99%E5%88%86%E4%BA%AB/</id>
    <published>2021-04-04T11:05:03.000Z</published>
    <updated>2022-03-10T09:13:30.087Z</updated>
    
    <content type="html"><![CDATA[<hr><h1 id="实用网站分享"><a href="#实用网站分享" class="headerlink" title="实用网站分享"></a>实用网站分享</h1><hr><span id="more"></span><h2 id="搞学习"><a href="#搞学习" class="headerlink" title="搞学习"></a>搞学习</h2><ul><li>CSDN：<a href="https://www.csdn.net/">https://www.csdn.net/</a></li><li>TED（最优质的演讲）：</li><li><a href="https://www.ted.com/">https://www.ted.com/</a></li><li>谷粉学术：<a href="https://gfsoso.99lb.net/scholar.html">https://gfsoso.99lb.net/scholar.html</a></li><li>大学资源网：<a href="http://www.dxzy163.com/">http://www.dxzy163.com/</a></li><li>简答题：<a href="http://www.jiandati.com/">http://www.jiandati.com/</a></li><li>网易公开课：<a href="https://open.163.com/ted/">https://open.163.com/ted/</a></li><li>网易云课堂：<a href="https://study.163.com/">https://study.163.com/</a></li><li>中国大学 MOOC：<a href="http://www.icourse163.org/">www.icourse163.org</a></li><li>哔哩哔哩弹幕网：<a href="http://www.bilibili.com/">www.bilibili.com</a></li><li>我要自学网：<a href="http://www.51zxw.net/">www.51zxw.net</a></li><li>知乎：<a href="http://www.zhihu.com/">www.zhihu.com</a></li><li>学堂在线：<a href="http://www.xuetangx.com/">www.xuetangx.com</a></li><li>爱课程：<a href="http://www.icourses.cn/">www.icourses.cn</a></li><li>猫咪论文：<a href="https://lunwen.im/">https://lunwen.im/</a></li><li>iData（论文搜索）：<a href="http://www.cn-ki.net/">www.cn-ki.net</a></li><li>文泉考试：<a href="https://www.wqkaoshi.com/">https://www.wqkaoshi.com</a></li></ul><h2 id="找书籍"><a href="#找书籍" class="headerlink" title="找书籍"></a>找书籍</h2><ul><li>书栈网（极力推荐）：<a href="https://www.bookstack.cn/">https://www.bookstack.cn/</a></li><li>码农之家（计算机电子书下载）：<a href="http://www.xz577.com/">www.xz577.com</a></li><li>鸠摩搜书：<a href="http://www.jiumodiary.com/">www.jiumodiary.com</a></li><li>云海电子图书馆：<a href="http://www.pdfbook.cn/">www.pdfbook.cn</a></li><li>周读（书籍搜索）：ireadweek.com</li><li>知轩藏书：<a href="http://www.zxcs.me/">http://www.zxcs.me/</a></li><li>脚本之家电子书下载：<a href="https://www.jb51.net/books/">https://www.jb51.net/books/</a></li><li>搜书 VIP-电子书搜索：<a href="http://www.soshuvip.com/all.html">http://www.soshuvip.com/all.html</a></li><li>书格（在线古籍图书馆）：<a href="https://new.shuge.org/">https://new.shuge.org/</a></li><li>caj 云阅读：<a href="http://cajviewer.cnki.net/cajcloud/">http://cajviewer.cnki.net/cajcloud/</a></li><li>必看网（人生必看的书籍）：<a href="https://www.biikan.com/">https://www.biikan.com/</a></li></ul><h2 id="冷知识-黑科技"><a href="#冷知识-黑科技" class="headerlink" title="冷知识 / 黑科技"></a>冷知识 / 黑科技</h2><ul><li>上班摸鱼必备（假装电脑系统升级）：<a href="http://fakeupdate.net/">http://fakeupdate.net/</a> PIECES 拼图（30 个 CSS 碎片进行拼图，呈现 30 种濒临灭绝的动物）：<a href="http://www.species-in-pieces.com/">http://www.species-in-pieces.com/</a></li><li>图片立体像素画：<a href="https://pissang.github.io/voxelize-image/">https://pissang.github.io/voxelize-image/</a></li><li>福利单词（一个不太正经的背单词网站）：<a href="http://dict.ftqq.com/">http://dict.ftqq.com</a></li><li>查无此人（刷新网站，展现一张 AI 生成的人脸照片）：<a href="https://thispersondoesnotexist.com/">https://thispersondoesnotexist.com/</a></li><li>在线制作地图图例：<a href="https://mapchart.net/">https://mapchart.net/</a></li><li>创意光线绘画：<a href="http://weavesilk.com/">http://weavesilk.com/</a></li><li>星系观察：<a href="https://stellarium-web.org/">https://stellarium-web.org/</a></li><li>煎蛋：<a href="http://jandan.net/">http://jandan.net/</a></li><li>渣男-说话的艺术：<a href="https://lovelive.tools/">https://lovelive.tools/</a></li><li>全历史：<a href="https://www.allhistory.com/">https://www.allhistory.com/</a></li><li>iData：<a href="https://www.cn-ki.net/">https://www.cn-ki.net/</a></li><li>术语在线：<a href="http://www.termonline.cn/">http://www.termonline.cn/</a></li></ul><h2 id="写代码"><a href="#写代码" class="headerlink" title="写代码"></a>写代码</h2><ul><li>GitHub：<a href="https://github.com/">https://github.com/</a></li><li>码云：<a href="https://gitee.com/">https://gitee.com/</a></li><li>源码之家：<a href="https://www.mycodes.net/">https://www.mycodes.net/</a></li><li>JSON to Dart：</li><li><a href="https://javiercbk.github.io/json/_to/_dart/">https://javiercbk.github.io/json\_to\_dart/</a></li><li>Json 在线解析验证：</li><li><a href="https://www.json.cn/">https://www.json.cn/</a></li><li>在线接口测试（Getman）：</li><li><a href="https://getman.cn/">https://getman.cn/</a></li></ul><h2 id="资源搜索"><a href="#资源搜索" class="headerlink" title="资源搜索"></a>资源搜索</h2><ul><li>DogeDoge 搜索引擎：<a href="http://www.dogedoge.com/">www.dogedoge.com</a></li><li>秘迹搜索：<a href="https://mijisou.com/">https://mijisou.com/</a></li><li>小白盘：<a href="https://www.xiaobaipan.com/">https://www.xiaobaipan.com/</a></li><li>云盘精灵（资源搜索）：</li><li><a href="http://www.yunpanjingling.com/">www.yunpanjingling.com</a></li><li>虫部落（资源搜索）：</li><li><a href="http://www.chongbuluo.com/">www.chongbuluo.com</a></li><li>如风搜（资源搜索）：</li><li><a href="http://www.rufengso.net/">http://www.rufengso.net/</a></li><li>爱扒：<a href="https://www.zyboe.com/">https://www.zyboe.com/</a></li></ul><h2 id="小工具"><a href="#小工具" class="headerlink" title="小工具"></a>小工具</h2><ul><li>奶牛快传（在线传输文件利器）：cowtransfer.com</li><li>文叔叔（大文件传输，不限速）：</li><li><a href="https://www.wenshushu.cn/">https://www.wenshushu.cn/</a></li><li>云端超级应用空间（PS，PPT，Excel，Ai）：<a href="https://uzer.me/">https://uzer.me/</a></li><li>香当网（年终总结，个人简历，事迹材料，租赁合同，演讲稿）：</li><li><a href="https://www.xiangdang.net/">https://www.xiangdang.net/</a></li><li>二维码生成：<a href="https://cli.im/">https://cli.im/</a></li><li>搜狗翻译：fanyi.sogou.com</li><li>熵数（图表制作，数据可视化）：</li><li><a href="https://dydata.io/appv2/#/pages/index/home">https://dydata.io/appv2/#/pages/index/home</a></li><li>拷贝兔：<a href="https://cp.anyknew.com/">https://cp.anyknew.com/</a></li><li>图片无限变放大：<a href="http://bigjpg.com/zh">http://bigjpg.com/zh</a></li><li>幕布（在线大纲笔记工具）：mubu.com</li><li>在线转换器（在线转换器转换任何测量单位）：<a href="https://zh.justcnw.com/">https://zh.justcnw.com/</a></li><li>调查问卷制作：</li><li><a href="https://www.wenjuan.com/">https://www.wenjuan.com/</a></li><li>果核剥壳（软件下载）：</li><li><a href="https://www.ghpym.com/">https://www.ghpym.com/</a></li><li>软件下载：<a href="https://www.unyoo.com/">https://www.unyoo.com/</a></li><li>MSDN 我告诉你（windows10 系统镜像下载）：<a href="https://msdn.itellyou.cn/">https://msdn.itellyou.cn/</a></li></ul><h2 id="导航页（工具集）"><a href="#导航页（工具集）" class="headerlink" title="导航页（工具集）"></a>导航页（工具集）</h2><ul><li>世界各国网址大全：<a href="http://www.world68.com/">http://www.world68.com/</a></li><li>小森林导航：<a href="http://www.xsldh6.com/">http://www.xsldh6.com/</a></li><li>简捷工具：<a href="http://www.shulijp.com/">http://www.shulijp.com/</a></li><li>NiceTool.net 好工具网：<a href="http://www.nicetool.net/">http://www.nicetool.net/</a></li><li>现实君工具箱（综合型在线工具集成网站）：<a href="http://tool.uixsj.cn/">http://tool.uixsj.cn/</a></li><li>蓝调网站：<a href="http://lcoc.top/">http://lcoc.top/</a></li><li>偷渡鱼：<a href="https://touduyu.com/">https://touduyu.com/</a></li><li>牛导航：<a href="http://www.ziliao6.com/">http://www.ziliao6.com/</a></li><li>小呆导航：<a href="https://www.webjike.com/index.html">https://www.webjike.com/index.html</a></li><li>简法主页：<a href="http://www.jianfast.com/">http://www.jianfast.com/</a></li><li>KIM 主页：<a href="https://kim.plopco.com/">https://kim.plopco.com/</a></li><li>聚 BT：<a href="https://jubt.net/cn/index.html">https://jubt.net/cn/index.html</a></li><li>精准云工具合集：<a href="https://jingzhunyun.com/">https://jingzhunyun.com/</a></li><li>兔 2 工具合集：<a href="https://www.tool2.cn/">https://www.tool2.cn/</a></li><li>爱资料工具（在线实用工具集合）：<a href="http://www.toolnb.com/">www.toolnb.com</a></li><li>工具导航：<a href="https://hao.logosc.cn/">https://hao.logosc.cn/</a></li></ul><h2 id="看视频"><a href="#看视频" class="headerlink" title="看视频"></a>看视频</h2><ul><li>阿木影视：<a href="https://www.aosk.online/">https://www.aosk.online/</a></li><li>电影推荐（分类别致）：<a href="http://www.mvcat.com/">http://www.mvcat.com</a></li><li>APP 影院：<a href="https://app.movie/">https://app.movie</a></li><li>去看 TV：<a href="https://www.qukantv.net/">https://www.qukantv.net/</a></li><li>动漫视频网：<a href="http://www.zzzfun.com/">http://www.zzzfun.com/</a></li><li>94 神马电影网：<a href="http://www.9rmb.com/">http://www.9rmb.com/</a></li><li>NO 视频官网：<a href="http://www.novipnoad.com/">http://www.novipnoad.com/</a></li><li>蓝光画质电影：<a href="http://www.languang.co/">http://www.languang.co/</a></li><li>在线看剧：<a href="http://dy.27234.cn/">http://dy.27234.cn/</a></li><li>大数据导航：<a href="http://hao.199it.com/">http://hao.199it.com/</a></li><li>多功能图片网站：<a href="https://www.logosc.cn/so/">https://www.logosc.cn/so/</a></li><li>牛牛 TV：<a href="http://www.ziliao6.com/tv/">http://www.ziliao6.com/tv/</a></li><li>VideoFk 解析视频：<a href="http://www.videofk.com/">http://www.videofk.com/</a></li><li>蓝调网站：<a href="http://lcoc.top/vip2.3/">http://lcoc.top/vip2.3/</a></li><li>永久资源采集网：<a href="http://www.yongjiuzy1.com/">http://www.yongjiuzy1.com/</a></li></ul><h2 id="学设计"><a href="#学设计" class="headerlink" title="学设计"></a>学设计</h2><ul><li>码力全开（产品/设计师/独立开发者的资源库）：<a href="https://www.maliquankai.com/designnav/">https://www.maliquankai.com/designnav/</a></li><li>免费音频素材：<a href="https://icons8.cn/music">https://icons8.cn/music</a></li><li>新 CG 儿（视频素材模板，无水印+免费下载）：<a href="https://www.newcger.com/">https://www.newcger.com/</a></li><li>Iconfont（阿里巴巴矢量图标库）：<a href="https://www.iconfont.cn/">https://www.iconfont.cn/</a></li><li>小图标下载：<a href="https://www.easyicon.net/">https://www.easyicon.net/</a></li><li>Flight Icon：<a href="https://www.flighticon.co/">https://www.flighticon.co/</a></li><li>第一字体转换器：<a href="http://www.diyiziti.com/">http://www.diyiziti.com/</a></li><li>doyoudosh（平面设计）：<a href="http://www.doyoudo.com/">www.doyoudo.com</a></li><li>企业宣传视频在线制作：<a href="https://duomu.tv/">https://duomu.tv/</a></li><li>MAKE 海报设计官网：<a href="http://maka.im/">http://maka.im/</a></li><li>一键海报神器：<a href="https://www.logosc.cn/photo/utm/_source=hao.logosc.cn&amp;utm/_medium=referral">https://www.logosc.cn/photo/utm\_source=hao.logosc.cn&amp;utm\_medium=referral</a></li><li>字由（字体设计）：<a href="http://www.hellofont.cn/">http://www.hellofont.cn/</a></li><li>查字体网站：<a href="https://fonts.safe.360.cn/">https://fonts.safe.360.cn/</a></li><li>爱给网（免费素材下载的网站，包括音效、配乐，3D、视频、游戏，平面、教程）：<a href="http://www.aigei.com/">http://www.aigei.com/</a></li><li>在线视频剪辑：<a href="https://bilibili.clipchamp.com/editor">https://bilibili.clipchamp.com/editor</a></li></ul><h2 id="搞文档"><a href="#搞文档" class="headerlink" title="搞文档"></a>搞文档</h2><ul><li>即书（在线制作 PPT）：<a href="https://www.keysuper.com/">https://www.keysuper.com/</a></li><li>PDF 处理：<a href="https://smallpdf.com/cn">https://smallpdf.com/cn</a></li><li>PDF 处理：<a href="https://www.ilovepdf.com/zh-cn">https://www.ilovepdf.com/zh-cn</a></li><li>PDF 处理：<a href="https://www.pdfpai.com/">https://www.pdfpai.com/</a></li><li>PDF 处理：<a href="https://www.hipdf.cn/">https://www.hipdf.cn/</a></li><li>图片压缩，PDF 处理：<a href="https://docsmall.com/">https://docsmall.com/</a></li><li>腾讯文档（在线协作编辑和管理文档）：docs.qq.com</li><li>ProcessOn（在线协作制作结构图）：<a href="http://www.processon.com/">www.processon.com</a></li><li>iLovePDF（在线转换 PDF 利器）：<a href="http://www.ilovepdf.com/">www.ilovepdf.com</a></li><li>PPT 在线制作：<a href="https://www.woodo.cn/">https://www.woodo.cn/</a></li><li>PDF24 工具（pdf 处理工具）：<a href="https://tools.pdf24.org/en">https://tools.pdf24.org/en</a></li><li>IMGBOT（在线图片处理）：<a href="http://www.imgbot.ai/">www.imgbot.ai</a></li><li>福昕云编辑（在线编辑 PDF）：edit.foxitcloud.cn</li><li>TinyPNG（在线压缩图片）：tinypng.com</li><li>UZER.ME（在线使用各种大应用，在线使用 CAD，MATLAB，Office 三件套 ）：uzer.me</li><li>优品 PPT（模板下载）：<a href="http://www.ypppt.com/">http://www.ypppt.com/</a></li><li>第一 PPT（模板下载）：<a href="http://www.1ppt.com/xiazai/">http://www.1ppt.com/xiazai/</a></li><li>三顿 PPT 导航：sandunppt.com</li><li>Excel 函数表：<a href="https://support.office.com/zh-cn/article/excel-%E5%87%BD%E6%95%B0%EF%BC%88%E6%8C%89%E5%AD%97%E6%AF%8D%E9%A1%BA%E5%BA%8F%EF%BC%89-b3944572-255d-4efb-bb96-c6d90033e188">https://support.office.com/zh-cn/article/excel-%E5%87%BD%E6%95%B0%EF%BC%88%E6%8C%89%E5%AD%97%E6%AF%8D%E9%A1%BA%E5%BA%8F%EF%BC%89-b3944572-255d-4efb-bb96-c6d90033e188</a></li></ul><h2 id="找图片"><a href="#找图片" class="headerlink" title="找图片"></a>找图片</h2><ul><li>电脑壁纸：<a href="http://lcoc.top/bizhi/">http://lcoc.top/bizhi/</a></li><li><a href="https://unsplash.com/">https://unsplash.com/</a></li><li><a href="https://pixabay.com/">https://pixabay.com/</a></li><li><a href="https://www.pexels.com/">https://www.pexels.com/</a></li><li><a href="https://visualhunt.com/">https://visualhunt.com/</a></li><li><a href="https://www.ssyer.com/">https://www.ssyer.com/</a></li><li>彼岸图网：<a href="http://pic.netbian.com/">http://pic.netbian.com/</a></li><li>极像素（超高清大图）：<a href="https://www.sigoo.com/">https://www.sigoo.com/</a></li><li>免费版权图片搜索：<a href="https://www.logosc.cn/so/">https://www.logosc.cn/so/</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;hr&gt;
&lt;h1 id=&quot;实用网站分享&quot;&gt;&lt;a href=&quot;#实用网站分享&quot; class=&quot;headerlink&quot; title=&quot;实用网站分享&quot;&gt;&lt;/a&gt;实用网站分享&lt;/h1&gt;&lt;hr&gt;</summary>
    
    
    
    <category term="分享" scheme="https://xuyuquan0713.github.io/categories/%E5%88%86%E4%BA%AB/"/>
    
    
    <category term="网站" scheme="https://xuyuquan0713.github.io/tags/%E7%BD%91%E7%AB%99/"/>
    
  </entry>
  
  <entry>
    <title>MATLAB中的函数学习</title>
    <link href="https://xuyuquan0713.github.io/2021/03/12/%E6%88%91%E7%9A%84%E5%8D%9A%E5%AE%A2%E5%88%9B%E5%BB%BA/"/>
    <id>https://xuyuquan0713.github.io/2021/03/12/%E6%88%91%E7%9A%84%E5%8D%9A%E5%AE%A2%E5%88%9B%E5%BB%BA/</id>
    <published>2021-03-12T06:56:37.000Z</published>
    <updated>2022-03-10T09:13:30.101Z</updated>
    
    <content type="html"><![CDATA[<hr><p>遇到的 matlab 函数的小计，持续增加</p><hr><span id="more"></span><h1 id="rand-函数指定区域内的随机数"><a href="#rand-函数指定区域内的随机数" class="headerlink" title="rand 函数指定区域内的随机数"></a>rand 函数指定区域内的随机数</h1><p>一般来说，可以使用公式 r = a + (b-a).*rand(N,1) 生成区间 (a,b) 内的 N 个随机数。</p><pre class="line-numbers language-test" data-language="test"><code class="language-test">&gt;&gt; r &#x3D; -5 + (5+5)*rand(10,1)     %生成一个由区间 (-5,5) 内均匀分布的数字组成的 10×1 列向量。r &#x3D;   -0.6126   -1.1844    2.6552    2.9520   -3.1313   -0.1024   -0.5441    1.4631    2.0936    2.5469<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
    <summary type="html">&lt;hr&gt;
&lt;p&gt;遇到的 matlab 函数的小计，持续增加&lt;/p&gt;
&lt;hr&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://xuyuquan0713.github.io/2021/03/11/hello-world/"/>
    <id>https://xuyuquan0713.github.io/2021/03/11/hello-world/</id>
    <published>2021-03-11T06:56:37.000Z</published>
    <updated>2022-03-10T09:13:30.101Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><span id="more"></span><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo generate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p><pre class="line-numbers language-none"><code class="language-none">上传到git上和gitee上备份博客git add .git commit -m &quot;xxxx&quot;上传到hexo分支git push -u origin hexogit push -u gitee hexo<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for more info. If you get any problems when using Hexo, you can find the answer in &lt;a href=&quot;https://hexo.io/docs/troubleshooting.html&quot;&gt;troubleshooting&lt;/a&gt; or you can ask me on &lt;a href=&quot;https://github.com/hexojs/hexo/issues&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;</summary>
    
    
    
    
    <category term="tags" scheme="https://xuyuquan0713.github.io/tags/tags/"/>
    
  </entry>
  
</feed>
